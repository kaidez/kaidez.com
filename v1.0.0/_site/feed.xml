<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>kaidez</title>
		<description>kaidez.com / Tutorials and articles about Web Development</description>
		<link>http://kaidez.com</link>
		<atom:link href="http://kaidez.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Start Taking CSS Seriously</title>
				<description>&lt;p&gt;I&#39;ve always tried to avoid rants on my blog because I&#39;ve felt my opinion didn&#39;t matter. I know how to write client-side code and think I&#39;m &lt;em&gt;pretty&lt;/em&gt; good at it, but I&#39;m not a &quot;well-known leader in the web development community.&quot;&lt;/p&gt;

&lt;p&gt;But I&#39;ve created enough quality code for established companies and &lt;a href=&quot;/lynda-kaidez/&quot;&gt;I&#39;ve taught web development courses for a well-respected e-learning company&lt;/a&gt;. All this makes me feel I&#39;ve earned the right to rant about things that I &lt;em&gt;know&lt;/em&gt; we web dev should be doing.&lt;/p&gt;

&lt;p&gt;And I &lt;em&gt;know&lt;/em&gt; we need to do a better job of shipping high-quality CSS.&lt;/p&gt;

&lt;h2&gt;We&#39;ve Got The JavaScript Thing Covered&lt;/h2&gt;

</description>
				<pubDate>Thu, 13 Aug 2015 22:37:45 -0400</pubDate>
				<link>http://kaidez.com/take-css-seriously/</link>
				<guid isPermaLink="true">http://kaidez.com/take-css-seriously/</guid>
			</item>
		
			<item>
				<title>TUTORIAL: Create A 'Click to Tweet' link with JavaScript</title>
				<description>&lt;p&gt;&lt;a href=&quot;/samples/click-to-tweet/02/&quot; class=&quot;demoLink&quot; target=&quot;blank&quot;&gt;VIEW THE DEMO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&quot;Click to Tweet&quot; links are a highly-recommended way of promoting your site content. Politely asking readers to Tweet your content often leads to them doing so if you give them an easy way to do it.&lt;/p&gt;

&lt;p&gt;I&#39;m redesigning my blog with WordPress at the time of this post and this functionality will be part of the new design. I want it optimized to run as fast as possible so I&#39;m creating it with JavaScript instead of depending on a WordPress plugin...yes, &lt;strong&gt;this code can work outside of WordPress&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 style=&quot;clear:both;&quot;&gt;Table of Contents&lt;/h2&gt;


&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#notes&quot;&gt;Some Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#optimized&quot;&gt;This Code Is Optimized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#simple-link&quot;&gt;A Simple Click To Tweet Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html-css&quot;&gt;Review The HTML &amp;amp; CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#complicated-url&quot;&gt;Dealing with Complicated URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#regex&quot;&gt;Clean Up The Link With A Regular Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Some Notes&lt;/h2&gt;

&lt;p&gt;This code only works if it runs on some sort of web server setup. So if you want to test it, you&#39;ll need to either run it on an actual website or simulate a web server on your local machine using something like &lt;a href=&quot;https://www.mamp.info/&quot; title=&quot;Learn more about MAMP for Mac&quot;&gt;MAMP for Mac&lt;/a&gt;, &lt;a href=&quot;http://www.wampserver.com/&quot; title=&quot;Learn more about WAMP for Windows&quot;&gt;WAMP for Windows&lt;/a&gt; or &lt;a href=&quot;https://www.apachefriends.org/index.html,&quot; title=&quot;Learn more about XAMMP for Windows, Mac and Linux&quot;&gt;XAMMP, which is cross-platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Due to how I build my posts, my final JS code requires a regular expression. It&#39;s a simple one but it still may be too complex for your needs; therefore, you may want to go directly to &lt;a href=&quot;#simple-link&quot;&gt;the part of the post with the simple Click to Tweet code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This Click to Tweet code is meant to work dynamically: it uses JavaScript (and SOME jQuery) to find elements on a web page, add attributes to one of them and set up click events...very dynamic. If you want to hard-code a Click to Tweet link, I suggest reading &lt;a href=&quot;http://gpiot.com/blog/elegant-twitter-share-button-and-dialog-with-jquery/&quot; title=&quot;Read Guillaume Piot&#39;s Click to Tweet tutorial&quot;&gt;Guillaume Piot&#39;s excellent tutorial&lt;/a&gt;, which was the main source of inspiration for my code.&lt;/p&gt;

&lt;p&gt;Lastly, if you&#39;re using something like WordPress, Drupal or Jekyll to build a site, I&#39;m assuming you can figure out how to use this code within it. In the case of my WordPress site, I&#39;ll have to (at the bare minimum) create a custom &lt;code&gt;footer.php&lt;/code&gt; file for the single posts that&#39;s different from the one used for the non-post pages. All this requires creating custom WordPress PHP code, which you may not want to do. If this describes your situation, you may want to just use a plugin like &lt;a href=&quot;https://wordpress.org/plugins/click-to-tweet-by-todaymade/&quot; title=&quot;Review the Click To Tweet plugin for WordPress&quot;&gt;Click To Tweet for WordPress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;optimized&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;This Code Is Optimized&lt;/h2&gt;

&lt;p&gt;This code optimized to run as fast as possible in two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;No need to use widgets.js:&lt;/strong&gt; &lt;code&gt;widgets.js&lt;/code&gt; is the core Twitter file used to  create various kinds of Twitter buttons on a site. Not needing it for this code means that my site will make one less server request. I should point out that Twitter prefers that you use this file on your site when creating Tweet functionality and you can add it if you want to, but this code seems to work fine without it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No need for plugins:&lt;/strong&gt; No need for any jQuery plugins, WordPress plugins, Drupal plugins or whatever. This code creates a very small footprint.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;html-css&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Review The HTML &amp;amp; CSS&lt;/h2&gt;

&lt;p&gt;The HTML and CSS for this is pretty basic.  Looking at the HTML first...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Click to Tweet Link - Sample 1&amp;lt;/title&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Click to Tweet Link&amp;lt;/h1&amp;gt;
  &amp;lt;h2 id=&amp;quot;blog-post-title&amp;quot;&amp;gt;Click to Tweet Link Tutorial - Sample 1&amp;lt;/h2&amp;gt;

  &amp;lt;div&amp;gt;
    This is an example for building a really simple &amp;quot;Click To Tweet&amp;quot; link. Learn how to build it &amp;lt;a href=&amp;quot;/click-to-tweet/&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.
  &amp;lt;/div&amp;gt;

  &amp;lt;div&amp;gt;
    &amp;lt;a id=&amp;quot;tweet-this-post&amp;quot; class=&amp;quot;tweet-post-class&amp;quot;&amp;gt;would you like to tweet this page?&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-1.11.3.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;tweetButton.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The two key page elements are: 1) the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; tag with an id of &lt;code&gt;blog-post-title&lt;/code&gt;, and 2) the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag with an id of &lt;code&gt;tweet-this-post&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; represents the blog post&#39;s title. We&#39;ll use the copy inside of it for the copy of our Tweet.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag is our &quot;Click to Tweet&quot; link. We&#39;ll use JavaScript to bind functionality to it that builds our Tweet if it&#39;s clicked.&lt;/p&gt;

&lt;p&gt;Then we&#39;re linking jQuery to our site and are also linking a file called &lt;code&gt;tweetButton.js&lt;/code&gt;. The latter file will contain the Click to Tweet code, and will be our main focus throughout this tutorial.&lt;/p&gt;

&lt;p&gt;Then there&#39;s the CSS...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;body {
  font-family: Helvetica, Arial, sans-serif;
}

.tweet-post-class {
  display: block;
  height: auto;
  width: 280px;
  margin: 50px auto 0;
  padding: 10px;
  border-radius: 5px;

  background-color: #ED327F;
  text-align: center;
  cursor: pointer;
}

a.tweet-post-class {
  color:#fff;
  text-decoration:none
}

a.tweet-post-class:visited {
  color:#fff
}

a.tweet-post-class:active,
a.tweet-post-class:hover {
  color:#fff;
  background-color:#55acee
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The Click to Tweet link is styled nicely...past that, there&#39;s not much happening here.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;simple-link&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;A Simple Click To Tweet Link&lt;/h2&gt;

&lt;p&gt;Again, the final JavaScript code I&#39;m using is a bit complex. There is a simple way to create this link that we&#39;ll look at first...it&#39;s based on the Guillaume Piot code mentioned above.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;(function(){

  var getPostTitle = document.getElementById( &amp;quot;blog-post-title&amp;quot; ).innerHTML,
      linkElement = document.getElementById( &amp;quot;tweet-this-post&amp;quot; ),
      getPostLink = window.location.href;

  linkElement.setAttribute( &amp;quot;href&amp;quot;, getPostLink );

  $( linkElement ).on( &amp;quot;click&amp;quot;, function( event ){

    event.preventDefault();

    var tweetedLink = this.getAttribute( &amp;quot;href&amp;quot; );

    window.open( &amp;quot;http://twitter.com/intent/tweet?url=&amp;quot; + tweetedLink + &amp;quot;&amp;amp;text=&amp;quot; + getPostTitle + &amp;quot;&amp;amp;via=kaidez&amp;amp;&amp;quot;, &amp;quot;twitterwindow&amp;quot;, &amp;quot;height=450, width=550, toolbar=0, location=0, menubar=0, directories=0, scrollbars=0&amp;quot; );

  });

})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Breaking down the code...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;(function(){
...
})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;All the code is wrapped in an &lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/&quot; title=&quot;Learn more about Immediately-Invoked Function Expressions&quot;&gt;Immediately-Invoked Function Expression (IIFE)&lt;/a&gt;, meaning it will run as soon as &lt;code&gt;tweetButton.js&lt;/code&gt; loads in the browser.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var getPostTitle = document.getElementById( &amp;quot;blog-post-title&amp;quot; ).innerHTML,
    linkElement = document.getElementById( &amp;quot;tweet-this-post&amp;quot; ),
    getPostLink = window.location.href;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Three variables are defined in a single var pattern. Using the id attributes for both the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags just discussed, we&#39;re referencing each one with the first two JavaScript variables, respectively named &lt;code&gt;getPostTitle&lt;/code&gt; and &lt;code&gt;linkElement&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The third variable, &lt;code&gt;getPostLink&lt;/code&gt;, stores whatever URL is in the browser&#39;s address bar after page-load.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;linkElement.setAttribute( &amp;quot;href&amp;quot;, getPostLink );&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Find the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag (referenced by the &lt;code&gt;linkElement&lt;/code&gt; variable) and set its &lt;code&gt;href&lt;/code&gt; attribute. This attribute&#39;s value will be &lt;code&gt;getPostLink&lt;/code&gt; which, again, is the URL in the address bar.&lt;/p&gt;

&lt;p&gt;At this point in the code, the Click to Tweet link that&#39;s already on the web page has been updated to look like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;!-- An &amp;#39;href&amp;#39; value has been added --&amp;gt;
&amp;lt;a id=&amp;quot;tweet-this-post&amp;quot; class=&amp;quot;tweet-post-class&amp;quot; href=&amp;quot;http://kaidez.com/samples/click-to-tweet/01/&amp;quot;&amp;gt;would you like to tweet this page?&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Looking at the rest of the JavaScript...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;$( linkElement ).on( &amp;quot;click&amp;quot;, function( event ){
  event.preventDefault();
  ...
})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Once the IIFE runs, we&#39;re using &lt;code&gt;jQuery.on()&lt;/code&gt; to bind click functionality to &lt;code&gt;linkElement&lt;/code&gt;, our code&#39;s reference to the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag. That tag has an &lt;code&gt;href&lt;/code&gt; attribute, meaning that end-users will be forwarded to a web page if it&#39;s clicked.&lt;/p&gt;

&lt;p&gt;This is a link&#39;s default behavior and because of how our code needs to works, we need to prevent it from happening. We do this by passing an &lt;code&gt;event&lt;/code&gt; parameter to the function, then run &lt;code&gt;event.preventDefault()&lt;/code&gt; inside the &lt;code&gt;jQuery.on()&lt;/code&gt; method.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var tweetedLink = this.getAttribute( &amp;quot;href&amp;quot; );

window.open( &amp;quot;http://twitter.com/intent/tweet?url=&amp;quot; + tweetedLink + &amp;quot;&amp;amp;text=&amp;quot; + getPostTitle + &amp;quot;&amp;amp;via=kaidez&amp;amp;&amp;quot;, &amp;quot;twitterwindow&amp;quot;, &amp;quot;height=450, width=550, toolbar=0, location=0, menubar=0, directories=0, scrollbars=0&amp;quot; );&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;When the link is clicked, it will grab whatever the value is of its &lt;code&gt;href&lt;/code&gt; attribute and store it in a variable called &lt;code&gt;tweetedLink&lt;/code&gt;. The click also opens a popup window pointing to a page built with &lt;a href=&quot;https://dev.twitter.com/web/intents#retweet-intent&quot; title=&quot;Learn more about Twitter Web intents&quot;&gt;Twitter Web Intents&lt;/a&gt; which, as per its documentation, &quot;provide[s] popup-optimized flows for working with Tweets &amp;amp; Twitter Users: Tweet, Reply, Retweet, Favorite, and Follow.&quot;&lt;/p&gt;

&lt;p&gt;A URL is built with important things that come after the query string (&lt;code&gt;?&lt;/code&gt;), which are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;?url=&quot; + tweetedLink&quot;&lt;/code&gt; value that comes at the start of the query string. Here, the &lt;code&gt;tweetedLink&lt;/code&gt; variable containing the &lt;code&gt;href&lt;/code&gt; value of our Click to Tweet is built into the URL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&quot;&amp;amp;text=&quot; + getPostTitle&lt;/code&gt; value that comes next. Here, the &lt;code&gt;getPostTitle&lt;/code&gt; variable we defined at the top of our code is also built into the URL and, again, it stores the name of our blog post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;amp;via=kaidez&lt;/code&gt; value that come next. Setting &lt;code&gt;via&lt;/code&gt; equal to your Twitter handle (or mine in this example) means the handle will be passed into the Tweet.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;For the rest of the code, the &lt;code&gt;twitterwindow&lt;/code&gt; value just creates the popup window with Twitter branding. It then sets its height and width and builds the window without a toolbar, address (location) bar, menu bar, bookmark bar and scrollbar.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;via&lt;/code&gt; values are optional. But if you give them values then, using this section&#39;s demo code as an example, the popup will look similar to this:&lt;/p&gt;

&lt;div style=&quot;margin:0 auto; max-width: 700px;&quot;&gt;
  &lt;img src=&quot;/img/click-to-tweet-sample-01.jpg&quot; class=&quot;imgBorder&quot; alt=&quot;sample of a Tweet Box&quot; /&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href=&quot;/samples/click-to-tweet/01/&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;SEE THE DEMO&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As mentioned above, this implementation is simple enough to work on your site. But my site had functionality that required a more complex code structure.
&lt;a name=&quot;complicated-url&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Dealing with Complicated URLs&lt;/h2&gt;

&lt;p&gt;There are some cases where my blog post URLs contain extra things. For example:&lt;/p&gt;

&lt;p&gt;Many posts, including this one, have a Table of Contents section that lets you jump to certain parts of the post. So if you got to this section of the post by clicking on its anchor link, the browser&#39;s address bar would be updated to look like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;http://kaidez.com/click-to-tweet-link/#complicated-url&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And if, for some reason, you hit the Click to Tweet link from there, there were instances where the URL in the Tweet window will look like this:&lt;/p&gt;

&lt;div style=&quot;margin:0 auto; max-width: 700px;&quot;&gt;
  &lt;img src=&quot;/img/click-to-tweet-sample-02.jpg&quot; class=&quot;imgBorder&quot; alt=&quot;sample of a Tweet Box&quot; /&gt;
&lt;/div&gt;


&lt;p&gt;Also, there are times when I use Urchin Traffic Monitor (UTM) codes in my post links to track their social network click-thru rates via Google Analytics. So if you got to this post via a link I posted on Facebook, the link would look like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;http://kaidez.com/click-to-tweet-link/?utm_source=facebook&amp;amp;utm_medium=link&amp;amp;utm_click-to-tweet&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And if, for some reason, you hit the Click to Tweet link from there, there were instances where the URL in the Tweet window will look like this:&lt;/p&gt;

&lt;div style=&quot;margin:0 auto; max-width: 700px;&quot;&gt;
  &lt;img src=&quot;/img/click-to-tweet-sample-03.jpg&quot; class=&quot;imgBorder&quot; alt=&quot;sample of a Tweet Box&quot; /&gt;
&lt;/div&gt;


&lt;p&gt;Note that the UTM link wasn&#39;t truncated so the post is over 140 characters.  All this is a problem.
&lt;a name=&quot;regex&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Clean Up The Link With A Regular Expression&lt;/h2&gt;

&lt;p&gt;The solution was to clean up the link in the address bar with a regular expression. Update the beginning of &lt;code&gt;tweetButton.js&lt;/code&gt; so it looks like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;(function(){

  var linkElement = document.getElementById( &amp;quot;tweet-this-post&amp;quot; ),
      getPostTitle = document.getElementById( &amp;quot;blog-post-title&amp;quot; ).innerHTML,
      getPostLink = window.location.href,
      cleanLink = getPostLink.replace( /[^/]*$/g, &amp;quot;&amp;quot; );
  
  linkElement.setAttribute( &amp;quot;href&amp;quot;, cleanLink );
  ...
  // The code below this point stays the same

})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We&#39;ve added a &lt;code&gt;cleanLink&lt;/code&gt; variable to our single var pattern. This variable looks at the characters that make up the &lt;code&gt;getPostlink&lt;/code&gt; variable (which is the URL in the browser&#39;s address bar), finds all the characters that come AFTER the last forward-slash (/) and uses JavaScript&#39;s &lt;code&gt;replace()&lt;/code&gt; method to replace them with whatever is passed to the second parameter (&quot;&quot;), which is...absolutely nothing!&lt;/p&gt;

&lt;p&gt;Previously, we set the &lt;code&gt;href&lt;/code&gt; value of &lt;code&gt;linkElement&lt;/code&gt; (the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag) to just be the complete URL in full...that was represented by the &lt;code&gt;getPostLink&lt;/code&gt; variable. We now set the &lt;code&gt;href&lt;/code&gt; to be &lt;code&gt;cleanLink&lt;/code&gt;, which is our cleaned-up URL.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/samples/click-to-tweet/02/&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;SEE THE DEMO...different URL than what you saw in the last picture.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I haven&#39;t put a &quot;Click to Tweet&quot; link on my live site at the time of this post, but I&#39;m told it works.  It&#39;ll be really satisfying if it works, but I&#39;m already satisfied by the fact that I coded all this myself without needing a plug-in.&lt;/p&gt;
</description>
				<pubDate>Thu, 30 Jul 2015 00:00:00 -0400</pubDate>
				<link>http://kaidez.com/click-to-tweet-link/</link>
				<guid isPermaLink="true">http://kaidez.com/click-to-tweet-link/</guid>
			</item>
		
			<item>
				<title>Write Code Every F#%king Day!</title>
				<description>&lt;p&gt;I&#39;ve been planning this post for a few months now. My initial plan was to make it my 100th post, using that milestone to review the things I&#39;ve done to be best web developer I can be.&lt;/p&gt;

&lt;p&gt;But the things I&#39;ve been doing have led to some very satisfying events during my first month at my new job. So I feel the need to publish this post now in the hopes it will help other web devs, especially the beginning ones.&lt;/p&gt;

&lt;p&gt;Both &lt;a href=&quot;http://christianheilmann.com/2013/05/10/justcode/&quot; title=&quot;Read &#39;#JUSTCODE&#39; by Christian Heilmann&quot;&gt;Christian Heilmann&lt;/a&gt; and &lt;a href=&quot;http://ejohn.org/blog/write-code-every-day/&quot; title=&quot;Read &#39;Write Code Every Day&#39; by John Resig&quot;&gt;John Resig&lt;/a&gt; have discussed these things before, and probably more elegantly than I&#39;m about to discuss them here. But they should transcend to all developers so one more blog post about them won&#39;t hurt.&lt;/p&gt;

&lt;p&gt;Simply put: write code every day.&lt;/p&gt;

&lt;p&gt;Every.&lt;/p&gt;

&lt;p&gt;F#%king.&lt;/p&gt;

&lt;p&gt;Day.&lt;/p&gt;

&lt;h2&gt;About the new job&lt;/h2&gt;

&lt;p&gt;As mentioned in my last post, &lt;a href=&quot;/revlon/&quot; title=&quot;Read about kaidez leaving Revlon&quot;&gt;I left Revlon&lt;/a&gt; and took a front end developer position at &lt;a href=&quot;http://www.everydayhealth.com/&quot; title=&quot;Visit Everyday Health&quot;&gt;Everyday Health&lt;/a&gt; where I perform a variety of web stack-based tasks. By &quot;web stack,&quot; I mean I work primarily with HTML, CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;The first tasks I was given were JavaScript and CSS bug fixes. I also had to rewrite some HTML to make it cross-browser/device compliant, but I dealt with these bugs mostly.&lt;/p&gt;

&lt;p&gt;Then I had to refactor functionality inside one of the company&#39;s public-facing web applications. This was a straight-up JavaScript task and was tougher than the bug fixes.&lt;/p&gt;

&lt;p&gt;I&#39;ve always been a bit insecure about my web stack skills being up to par, specifically the JavaScript one. JS goes through changes seemingly every minute and keeping up with the changes takes effort.&lt;/p&gt;

&lt;p&gt;So I&#39;ve always been a little concerned as to whether or not my JS skills are up-to-date and went into the new job with this concern. But a funny thing happened: I was able to do everything I was asked to do.&lt;/p&gt;

&lt;p&gt;I&#39;m not saying that the bugs were so easy to fix that a five-year old could fix them (they weren&#39;t), or that my ability to handle the refactor makes me the world&#39;s greatest web developer (it doesn&#39;t). I saying that I wasn&#39;t intimidated by these tasks because, as it turns out, my skills are better than I&#39;m giving myself credit for.&lt;/p&gt;

&lt;h2&gt;Why are my skills better than I&#39;m giving myself credit for?&lt;/h2&gt;

&lt;p&gt;I am 100% convinced that my ability to do the job is the direct result of a decision I made months ago to &lt;em&gt;try&lt;/em&gt; and write at least one piece of web stack code a day. I missed some days during the weekends but I&#39;m still writing code on a consistent basis.&lt;/p&gt;

&lt;p&gt;Some of the code was for work, some of it was for &lt;a href=&quot;/lynda-kaidez/&quot; title=&quot;Read about the lynda.com courses I created&quot;&gt;the lynda.com courses I created&lt;/a&gt;. Most of it was just my trying out some new framework or tool, or just playing with a certain part of the JavaScript core API.&lt;/p&gt;

&lt;p&gt;I ended up writing lots of code...lots and lots and lots of code. Here&#39;s a recent snapshot of my GitHub commit map that proves it:&lt;/p&gt;

&lt;p&gt;&lt;figure style=&quot;text-align: center; margin:50px auto;&quot;&gt;
  &lt;img src=&quot;/img/git-contrib-map.jpg&quot; class=&quot;imgBorderMaxWidth&quot; alt=&quot;kaidez GitHub Contribution Map&quot; /&gt;
  &lt;figcaption style=&quot;margin:20px auto 0;&quot;&gt;&lt;em&gt;Includes private repos...&lt;/em&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The blank days on the commit map (particularly those closest to the right) don&#39;t necessarily indicate that I didn&#39;t write code on those days. It may mean that I wrote code for my employer that shouldn&#39;t be committed to my personal GitHub repos...makes sense.&lt;/p&gt;

&lt;p&gt;The blank &lt;em&gt;weekend&lt;/em&gt; days mean that I took a break to have a life, which is awesome! We&#39;re still seeing that I wrote code pretty regularly and as a result of that, here&#39;s what happened when I got to Everyday Health:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;finding content inside a complex JSON API and loading it onto the page wasn&#39;t a problem for me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;using jQuery for managing data and state instead of creating fancy fade-ins wasn&#39;t a problem for me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fixing cross-browser errors related to CSS transitions wasn&#39;t a problem for me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;writing feature detection with pure JavaScript instead of Modernizr wasn&#39;t a problem for me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;creating a responsive web site without Bootstrap or Foundation wasn&#39;t a problem for me.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;You are a Web &lt;del&gt;Developer&lt;/del&gt; Engineer&lt;/h2&gt;

&lt;p&gt;As I was coding daily, I also had to solve some of the various problems that show up in web stack development. In fact, the bugs I worked on at Everyday Health were fixed by remembering how I solved these problems.&lt;/p&gt;

&lt;p&gt;That&#39;s important because &lt;strong&gt;a big part of a web developer&#39;s job is solving problems.&lt;/strong&gt; It&#39;s easily 70% of the job and, at the same time, is the most under-spoken part of it.&lt;/p&gt;

&lt;p&gt;It&#39;s an assumed skill-set for engineers of all types however...mechanical, electrical, etc. The railroads built across the continental United States in the 1800&#39;s wouldn&#39;t have come to be without engineers....someone had to solve the problem of laying flat tracks among the Rocky and Appalachian mountains.&lt;/p&gt;

&lt;p&gt;Like those engineers, we web devs are also architects that build cool things with code, but our jobs require us to be engineers as we build the cool things. Like those engineers, it&#39;s our job to not only solve problems with the things we create, but we need to anticipate the problems before we start creating.&lt;/p&gt;

&lt;p&gt;It&#39;s because of this that I&#39;m a bit uncomfortable with the term &quot;web developer&quot; and think &quot;web engineer&quot; better describes our jobs. Writing code daily makes you a better engineers...the problem it took you eight hours solve today will teach how to solve it in 10 minutes tomorrow.&lt;/p&gt;

&lt;h2&gt;Where do you go from here?&lt;/h2&gt;

&lt;p&gt;You go and start coding.  Here&#39;s how I suggest you do things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Track your progress with GitHub:&lt;/strong&gt; building up that above commit map was a nice way to track the progress of my daily coding.  Lengthening my &quot;Current Streak&quot; as much as I could was always a nice pat on the back I gave myself. Do the same if you can.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Never ever EVER ask someone to write the code for you:&lt;/strong&gt; I run into this a lot and readily admit to doing it myself in the past. You&#39;re not growing as a developer if you let someone else solve your code problems, but don&#39;t get me wrong. If someone&#39;s been working on a piece code for three hours and are stuck on a particular issue or two, I have absolutely no problem lending a helping hand. But if someone asks another to do their work from start to finish, that&#39;s the wrong way to do it and that someone&#39;s web development career is over before it started. Writing code everyday avoids this scenario.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write a lot of code, but make sure you maintain a work/life balance:&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/kaidez/status/596670528515104768&quot;&gt;I tweeted about coding everyday once&lt;/a&gt; but Christian Heilmann chimed in saying that a social life is also needed. I didn&#39;t say that in my original tweet but do agree with him. Too many programmers code morning, noon and night while sacrificing their social life, and I definitely don&#39;t recommend that. John Resig highlights the importance of a work/life/side project balance in his blog post and as mentioned above, I took breaks during a few weekends. And the weekends that I did code, it wasn&#39;t THAT much as I was with family and friends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Share what you learn:&lt;/strong&gt; A future tutorial of mine MIGHT cover a well-documented piece of the jQuery API that&#39;s been discussed on many other blogs. But the piece helped me solve a problem and changed my approach to building web apps, so I should share that info regardless of how many similar posts already exist. And if I share what I learned in an elegant way, I know the tutorial will help someone else. You should do the same: start a blog and write a lot of posts that say, &quot;this was my problem, this is how I solved it, this is what I learned.&quot; Write posts with the goal of helping people instead of inciting them to click on ads.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/SlexAxton&quot; title=&quot;Visit Alex Sexton on Twitter&quot;&gt;Alex Sexton&lt;/a&gt; delivered the best statement ever for learning web development:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&quot;The only way that I&#39;ve found that I&#39;m able to stay up to date is by creating. I follow a well-curated list of people on twitter, and read blogs and programming news sites, but when it comes down to it, the only time I&#39;m ever really learning is when I&#39;m doing.&lt;/p&gt;

&lt;p&gt;When I want to learn something, I&#39;ll just start a project with it, and along the way I&#39;ll figure out the other tools I need to be successful. After a few failed attempts, normally I can create something meaningful (that I usually throw away anyways) that allows me to understand core concepts and/or make quick uninformed jabs about things that I don&#39;t like or understand.&quot;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In the past, I spent too much time trying to learn by reading lots of books, taking classes and attending conferences when I should have learned by &lt;em&gt;doing&lt;/em&gt;. I spent the better part of the last year &quot;doing&quot; and am performing well at a job that I was nervous about at the start.&lt;/p&gt;

&lt;p&gt;And it&#39;s all because I tried to write code every day.&lt;/p&gt;

&lt;p&gt;Every.&lt;/p&gt;

&lt;p&gt;F#%king.&lt;/p&gt;

&lt;p&gt;Day.&lt;/p&gt;
</description>
				<pubDate>Mon, 15 Jun 2015 00:00:00 -0400</pubDate>
				<link>http://kaidez.com/write-code-every-f--king-day/</link>
				<guid isPermaLink="true">http://kaidez.com/write-code-every-f--king-day/</guid>
			</item>
		
			<item>
				<title>Goodbye, Revlon</title>
				<description>&lt;p&gt;Today, May 7th, 2015, marks my final day as a Revlon Cosmetics employee. I started on August 25th, 2005, meaning that I&#39;m leaving a little less than four months from my ten-year anniversary.&lt;/p&gt;

&lt;p&gt;I came on as consultant that created mostly Flash sitelets (remember those?) and eventually became a full-time employee that had to learn the ins and outs of object-oriented programming. I also learned to drop my bias of corporate environments and learned that doing web stack work in such an environment is just as good as working for a startup...even better in some ways.&lt;/p&gt;

&lt;p&gt;But while I was doing the web stack work that I liked (HTML, CSS, JavaScript), I wasn&#39;t doing enough of it. This was due to the changing needs of the company and this is neither a good or bad thing...it&#39;s just the way it is.&lt;/p&gt;

&lt;p&gt;I&#39;m moving onto a company called &lt;a href=&quot;http://www.everydayhealth.com/&quot; title=&quot;Visit Everyday Health&quot;&gt;Everyday Health&lt;/a&gt; which, as per its Company Overview, is &quot;a leading provider of digital health and wellness solutions.&quot;  It also has a TON of web stack work that needs to get done for all its various web properties.&lt;/p&gt;

&lt;p&gt;I&#39;m excited about the work I&#39;ll be doing at Everyday Health, but am NOT excited about leaving Revlon. Revlon had its ups and downs like any other company and some of the downs were really bad, but there were many, many, many more ups than there were downs.&lt;/p&gt;

&lt;p&gt;The biggest &quot;up&quot; was the extended family I found at the company and leaving all those people sucks. I send a special shout-out to Max Slabyak, whom I worked with for almost all the time I was with Revlon.&lt;/p&gt;

&lt;p&gt;I&#39;ve been recounting with Max all week how we went from building web code via emails, instant messages, and web briefs to working practically telepathically. We&#39;ve completed each other very well over the years as well as become very good friends so I will miss that.&lt;/p&gt;

&lt;p&gt;I also need to send specific shout-outs to some former bosses, specifically David Giambruno, Piotr Prussak and Erica Homer. Each one backed me up many times while at Revlon so I thank them for that as well.&lt;/p&gt;

&lt;p&gt;Finally, I thank the entire Revlon company for becoming my extended family over the past decade. I will miss you all.&lt;/p&gt;

&lt;p&gt;I&#39;m simultaneously excited and sad today. :-(&lt;/p&gt;
</description>
				<pubDate>Thu, 07 May 2015 00:00:00 -0400</pubDate>
				<link>http://kaidez.com/revlon/</link>
				<guid isPermaLink="true">http://kaidez.com/revlon/</guid>
			</item>
		
			<item>
				<title>SCREENCAST: CSS Build Demo</title>
				<description>&lt;p&gt;I interviewed a consultant once to help with some web projects at Revlon. As should be expected, I quizzed her on some various frameworks and libraries to gauge how up-to-date her skill-set was.&lt;/p&gt;

&lt;p&gt;The subject of using &lt;a href=&quot;http://getbootstrap.com&quot; title=&quot;Read more about Twitter Bootstrap&quot;&gt;Twitter Bootstrap&lt;/a&gt; as a tool for building responsive sites came up and she said that she didn&#39;t believe in using it, along with similar tools. She felt that they were too bloated to use in a real-world project and offered to demonstrate this to me so I had a better understanding of her opinion.&lt;/p&gt;

&lt;p&gt;It&#39;s important to note that we hired her for the position and that she did a fantastic job. Her opinion on web dev tooling didn&#39;t hinder her performance.&lt;/p&gt;

&lt;p&gt;If someone wants to use a flathead screwdriver to screw in a Phillips screw, the fact that they got the screw in there is all that matters.  The tools they used to get the job done is of no concern, at least, not to me.&lt;/p&gt;

&lt;p&gt;Still, her opinion haunts me to this day. Bootstrap &lt;em&gt;is&lt;/em&gt; bloated, but removing it easy with all the available web tools we have nowadays, specifically the ones in Node-land.&lt;/p&gt;

&lt;p&gt;Most profoundly, this is not the first time I&#39;ve heard this opinion...either from someone in person or online. And I wonder if enough developers are aware of how tools like &lt;a href=&quot;http://gulpjs.com/&quot; title=&quot;Read more about Gulp&quot;&gt;Gulp&lt;/a&gt; and &lt;a href=&quot;http://gruntjs.com/&quot; title=&quot;Read more about Grunt&quot;&gt;Grunt&lt;/a&gt; allow us to properly deal with issues like Bootstrap code bloat.&lt;/p&gt;

&lt;p&gt;To raise awareness, I did a screencast to demonstrate this tooling. I use Gulp (and a little Grunt) to create a severally-optimized CSS file...which contains Bootstrap.&lt;/p&gt;

&lt;p&gt;The tooling minifies and lints the code, and also does a swell job of handling auto-prefixing for the various browser vendors. But the highlights here are 1) the uncss task, which remove styles not in use in the site, and 2) the critical path task, which embeds above-the-fold CSS onto your page for faster rendering.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: managing critical path CSS is really REALLY new at the time of this screencast and is also recommended by Google. Read &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/&quot; title=&quot;Read Google&#39;s critical path CSS recommendations&quot;&gt;Google&#39;s critical path discussion on their Web Developers Fundamentals page&lt;/a&gt;, plus, &lt;a href=&quot;https://twitter.com/addyosmani&quot; title=&quot;Visit Addy Osmani on Twitter&quot;&gt;Addy Osmani&lt;/a&gt; discusses it during his excellent &lt;a href=&quot;https://www.youtube.com/watch?v=FEs2jgZBaQA&quot; title=&quot;Watch Addy Osmani&#39;s CSS Performance Tooling talk at CSSconf EU 2014&quot;&gt;&quot;CSS Performance Tooling&quot; talk at CSSconf EU 2014&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To be clear: this is NOT a tutorial. I do review some of the code that makes up the various tasks but as this is a demo, the reviews are not as thorough when compared to my other tutorials and screencasts.&lt;/p&gt;

&lt;p&gt;But if you want to learn more about how all this works, &lt;a href=&quot;https://github.com/kaidez/build-css-demo/tree/tutorial-branch&quot; title=&quot;View this tutorial&#39;s code on GitHub&quot;&gt;view the code on GitHub&lt;/a&gt;. &lt;code&gt;gulpfile.js&lt;/code&gt; is the key file to look at...it&#39;s well-commented and should give you a better understanding of how all this works.&lt;/p&gt;

&lt;p&gt;You may also want to give both &lt;code&gt;Gruntfile.js&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; a peek. And if you have any questions from there, feel free to leave a comment in this blog post.&lt;/p&gt;

&lt;p&gt;Now...view the screencast...either below or &lt;a href=&quot;https://www.youtube.com/watch?v=UDm6e7OKi4M&quot; title=&quot;View this screencast on YouTube&quot;&gt;on YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;ENJOY!!!!!!!!&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/UDm6e7OKi4M&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

</description>
				<pubDate>Wed, 01 Apr 2015 00:00:00 -0400</pubDate>
				<link>http://kaidez.com/css-build-demo/</link>
				<guid isPermaLink="true">http://kaidez.com/css-build-demo/</guid>
			</item>
		
			<item>
				<title>New Site I Worked On: parlorhairstudio.com</title>
				<description>&lt;p&gt;Many, many, many years ago, I created a Flash site for a close friend of mine&#39;s Montclair, NJ hair salon, Parlor Hair Studio. At the time, I was really good with Flash and was able to design and develop a site that was aligned with the times.&lt;/p&gt;

&lt;p&gt;Times have changed: Flash doesn&#39;t work on mobile, is not SEO-friendly, is not easy to update and, according to Brendan Eich, both Chrome and Firefox have blacklisted it. It was clearly a time for a change, so a new site for &lt;a href=&quot;http://parlorhairstudio.com&quot; title=&quot;Visit parlorhairstudio.com&quot;&gt;parlorhairstudio.com&lt;/a&gt; was needed.&lt;/p&gt;

&lt;h2 style=&quot;clear:both;&quot;&gt;Table of Contents&lt;/h2&gt;


&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#client-requirements&quot;&gt;Client Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#modern-design&quot;&gt;A Modern Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#wordpress-bootstrap&quot;&gt;Using WordPress &amp;amp; Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#local-seo&quot;&gt;Local SEO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#personal&quot;&gt;On a personal note...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;client-requirements&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Client Requirements&lt;/h3&gt;

&lt;p&gt;The client requirements were very straightforward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;make the design as modern as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;make it easy to update via WordPress.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;make it responsive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;make it mobile-friendly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;make as SEO-friendly as possible.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;modern-design&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;A Modern Design&lt;/h3&gt;

&lt;p&gt;My friend requested a clean, minimalist design...which is actually hard to do. This is because minimalist/flat/Swiss/whatever designs require doing more with less.&lt;/p&gt;

&lt;p&gt;You have to use whitespace, fonts and color in ways that conveys an inviting design. This takes time: it actually took about three weeks of image mock-up iterations before all parties were in agreement with the final look-and-feel.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;wordpress-bootstrap&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Using WordPress &amp;amp; Bootstrap&lt;/h3&gt;

&lt;p&gt;My friend wanted to use WordPress to both contain the design and that was no-brainer. Other content management systems like Joomla and Drupal have their strengths, but WordPress made more sense for this project due to its ease of use and wider swath of community plugin support.&lt;/p&gt;

&lt;p&gt;Development-wise, I created &lt;a href=&quot;https://codex.wordpress.org/Child_Themes&quot; title=&quot;Read more about creating a WordPress child theme&quot;&gt;a custom child theme&lt;/a&gt; against WordPress&#39; stock twentythirteen theme. This meant I could safely duplicate the core WordPress files and customize them as needed to implement the design...all-in-all very easy.&lt;/p&gt;

&lt;p&gt;That being said, I made a point to NOT duplicate a lot of core files and only did so when I had no choice. I&#39;ve been in situations where duplicating a lot of files for the sake of child-themes makes updating WordPress a pain.&lt;/p&gt;

&lt;p&gt;Plus, customizing a lot of files would make the site harder for my friend to maintain. I didn&#39;t want to create core functionality that could only be updated by editing a Coffeescript file and note a plugin, so I mostly customized the Parlor site by making changes to the core stylesheet and installed a small set of plugins.&lt;/p&gt;

&lt;p&gt;Speaking of stylesheets, I used the core CSS file that comes with &lt;a href=&quot;http://getbootstrap.com/&quot; title=&quot;Read more about Twitter Bootstrap&quot;&gt;Twitter Bootstrap&lt;/a&gt; to make the site responsive, which was also pretty easy. I used its &lt;a href=&quot;http://getbootstrap.com/css/#grid&quot; title=&quot;Read more about Twitter Bootstrap&#39;s Grid system&quot;&gt;Grid system&lt;/a&gt; to create a variety of responsive layouts...this also helped to make the site as mobile-friendly as possible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Side note: this project needed to be scaffolded with Bootstrap and a few other WordPress-centric files. I did this using my custom &quot;kdz&quot; tool...&lt;a href=&quot;https://github.com/kaidez/kdz&quot; title=&quot;See custom kdz scaffolding tool on GitHub&quot;&gt;see it on GitHub&lt;/a&gt; and &lt;a href=&quot;/kdz-build-tool/&quot; title=&quot;Read about kaidez&#39;s custom scaffolding tool, kdz&quot;&gt;read my blog post on this&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;local-seo&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Local SEO&lt;/h3&gt;

&lt;p&gt;Managing search engine optimization is pretty easy with WordPress. It&#39;s SEO-ready out of the box and if you then install &lt;a href=&quot;https://wordpress.org/plugins/wordpress-seo/&quot; title=&quot;Read more about Yoast&#39;s WordPress SEO plugin&quot;&gt;Yoast&#39;s WordPress SEO plugin&lt;/a&gt;, configuring SEO on your WordPress site is a straightforward process.&lt;/p&gt;

&lt;p&gt;But Parlor is a local business and there are other hair salons in the area competing for the same dollar. So placing higher in search results isn&#39;t easy: a local SEO strategy was required.&lt;/p&gt;

&lt;p&gt;We spent some time reviewing what other salons were doing for their websites, SEO-wise. And while some dropped the ball completely, there were much more that were doing things right then wrong.&lt;/p&gt;

&lt;p&gt;We looked at their web presence and code to see where we can better them. I&#39;m not going to go into great detail about what we did because, well, competition is competition.&lt;/p&gt;

&lt;p&gt;But I will say this...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;code needs to be added to some core WordPress files to make it more local SEO-friendly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Google likes mobile-friendly sites more and more everyday.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;offline SEO is just as important as online SEO.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;personal&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;On a personal note...&lt;/h3&gt;

&lt;p&gt;Personally, it was really good to get back into WordPress development. &lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;Read more about the Jekyll static site generator&quot;&gt;Jekyll&lt;/a&gt; was used to create the version of this site current to this post&#39;s publish date, and it has benefits. But there are things that are just too easy to do with WordPress.&lt;/p&gt;

&lt;p&gt;As a result of this, I will probably redesign this site using WordPress in the (hopefully) not-too-distant future. I&#39;ll go into more detail on what&#39;s easier when that redesign happens.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;There are a few post-launch tasks that need to be performed, but none of them are show-stoppers for not delivering a site that the client wanted. Everyone was happy when the site was launched so I really can&#39;t ask for anything more.&lt;/p&gt;
</description>
				<pubDate>Wed, 25 Mar 2015 00:00:00 -0400</pubDate>
				<link>http://kaidez.com/parlor-redesign/</link>
				<guid isPermaLink="true">http://kaidez.com/parlor-redesign/</guid>
			</item>
		
			<item>
				<title>kdz - My Personal Scaffolding Tool</title>
				<description>&lt;p&gt;I came up with some cool techniques after working on a bunch of web development projects, techniques based mostly around front-end tooling.  I knew I would use these techniques and tools in future projects, and also knew that I had to find a way to easily set them up at the start of each project.&lt;/p&gt;

&lt;p&gt;I solved the problem by creating a &lt;a href=&quot;https://nodejs.org/&quot; title=&quot;Go to the Node site&quot;&gt;Node&lt;/a&gt; scaffolding CLI tool. I&#39;m also being cute about it and naming it based on my hacker alias, calling it &quot;kdz&quot;.&lt;/p&gt;

&lt;h2 style=&quot;clear:both;&quot;&gt;Table of Contents&lt;/h2&gt;


&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#notes&quot;&gt;Some Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#how-this-started&quot;&gt;How This Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-problem&quot;&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#more-problems&quot;&gt;More Problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tool-building-process&quot;&gt;The Tool-Building Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#final-command&quot;&gt;The Final Command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#behind-the-scenes&quot;&gt;Behind The Scenes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#todo&quot;&gt;What&#39;s Left To Do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#further-reading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Some Notes&lt;/h2&gt;

&lt;p&gt;A few notes first...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is not a tutorial. I may do tutorials on certain parts of the code in the future but for now, I&#39;m just documenting the approach I took to solve a specific problem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kaidez/kdz&quot; title=&quot;See the &amp;quot;kdz&amp;quot; code on GitHub&quot;&gt;The &quot;kdz&quot; code is thoroughly commented on GitHub&lt;/a&gt; for your review: feel free to look at it and ask questions/make comments about it in a post comment. When reviewing the code, you want to look at the modules in the &lt;a href=&quot;https://github.com/kaidez/kdz/tree/master/config&quot; title=&quot;Review the npm code modules for &amp;quot;kdz&amp;quot;&quot;&gt;&lt;code&gt;config&lt;/code&gt; folder&lt;/a&gt; as well as &lt;a href=&quot;https://github.com/kaidez/kdz/blob/master/kdz.js&quot; title=&quot;Review the core &amp;quot;kdz.js&amp;quot; file&quot;&gt;the core &lt;code&gt;kdz.js&lt;/code&gt; file&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This tool will (probably) never be published as an &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; package so if you want to download it, please &lt;a href=&quot;https://github.com/kaidez/kdz#before-you-install&quot; title=&quot;Read the repo&#39;s &amp;quot;Before you install&amp;quot; section&quot;&gt;read the repo&#39;s &quot;Before you install&quot; section&lt;/a&gt; first.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;how-this-started&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;How This Started&lt;/h2&gt;

&lt;p&gt;I had a project at work where I had to create a single page website using a standard HTML5/CSS/JavaScript web stack. The project tooling was set up like this in my dev environment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jade-lang.com/&quot; title=&quot;Review the Jade HTML template engine&quot;&gt;Jade&lt;/a&gt; was used for HTML5 pre-processing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lesscss.org/&quot; title=&quot;Review the LESS pre-processor&quot;&gt;LESS&lt;/a&gt; was used for CSS pre-processing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coffeescript.org/&quot; title=&quot;Review the CoffeeScript JS pre-processor&quot;&gt;CoffeeScript&lt;/a&gt; was used for JavaScript pre-processing.&lt;/li&gt;
&lt;li&gt;I used the core CSS file that comes with &lt;a href=&quot;http://getbootstrap.com/&quot; title=&quot;Review Twitter Bootstrap&quot;&gt;Twitter Bootstrap&lt;/a&gt; because it I&#39;m very productive when using it to build a responsive web design.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bower.io/&quot; title=&quot;Review the Bower web package manager&quot;&gt;Bower&lt;/a&gt; was used to manage browser-level dependencies via a &lt;code&gt;bower.json&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/&quot; title=&quot;Review the npm package manager for Node&quot;&gt;npm&lt;/a&gt; was used to manage development-level dependencies via a &lt;code&gt;package.json&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gruntjs.com/&quot; title=&quot;Review the Grunt task runner&quot;&gt;Grunt&lt;/a&gt; and &lt;a href=&quot;http://gulpjs.com/&quot; title=&quot;Review the Gulp build system&quot;&gt;Gulp&lt;/a&gt; were used to automate various project tasks, especially build-out of the final page.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I had hit a serious comfort zone with the tools well in advance of starting this project. I had used all of them before and knew how to get them to work as a team inside my dev environment.&lt;/p&gt;

&lt;p&gt;This was especially true of the CSS processing, which was powered by Gulp...mostly. Gulp let me create an efficient process for generating a single, production-ready CSS file...linting it, minifying it, concatenating it, etc.&lt;/p&gt;

&lt;p&gt;I actually hit a point where I felt compelled to tweet this...&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot; style=&quot;margin: 0 auto;&quot;&gt;&lt;p&gt;Got my Gulp CSS build-out process working EXACTLY the way I want it to…only took 3 weeks.&lt;/p&gt;&amp;mdash; kai gittens (@kaidez) &lt;a href=&quot;https://twitter.com/kaidez/status/529054310379053056&quot;&gt;November 2, 2014&lt;/a&gt;&lt;/blockquote&gt;


&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;


&lt;p&gt;There was a rush to launch this project and as a result, it launched when the code was &quot;good enough,&quot; but &quot;not as good as it could&#39;ve been.&quot; Some things clearly needed refactoring.&lt;/p&gt;

&lt;p&gt;There was no time to refactor it during work hours due to other projects on my team&#39;s plate, so I decided to refactor the bad code parts on my own time. Since I liked with the tooling environment I used for the project, I decided to use it for the refactor.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;the-problem&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Recreating this setup was a pain in the a**. Since I was only refactoring &lt;em&gt;parts&lt;/em&gt; of the site code and not the &lt;em&gt;entire site&lt;/em&gt;, the tooling need to be adjusted in some spots.&lt;/p&gt;

&lt;p&gt;For example: I didn&#39;t need all the dependencies listed in the &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;bower.json&lt;/code&gt; files. I just needed the ones related to the code pieces I was refactoring, so I had to spend some time removing unneeded dependencies.&lt;/p&gt;

&lt;p&gt;OK...that was more of an inconvenience than a pain in the a**. But setting up the CSS build process again? That sucked.&lt;/p&gt;

&lt;p&gt;Again, I&#39;m a fan of how well Bootstrap does responsive web design and based my LESS setup around that. My &lt;code&gt;.less&lt;/code&gt; files were named based on Bootstraps&#39;s pre-defined set of media queries, allowing me to add media query code based Bootstrap&#39;s near-perfect setup.&lt;/p&gt;

&lt;p&gt;So since Bootstrap has a media query called &lt;code&gt;@media (min-width: 1200px)&lt;/code&gt;, I have a file called &lt;code&gt;min-width-1200.less&lt;/code&gt; that contains the following code:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-css&#39;&gt;@media (min-width: 1200px) {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And since it also has a media query called &lt;code&gt;@media screen and (min-width: 768px)&lt;/code&gt;, I have a file called &lt;code&gt;screen-and-min-width-768.less&lt;/code&gt; that contains the following code:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-css&#39;&gt;@media screen and (min-width: 768px) {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;You get the idea...&lt;/p&gt;

&lt;p&gt;Like the &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;bower.json&lt;/code&gt; files, the LESS files needed to be setup differently for the refactor. I only had to adjust two &lt;code&gt;.json&lt;/code&gt; files...I had to adjust 20 &lt;code&gt;.less&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Adjusting the &lt;code&gt;.json&lt;/code&gt; dependencies was a manageable inconvenience...adjusting the &lt;code&gt;.less&lt;/code&gt; files was a mind numbing sh*t-show.&lt;/p&gt;

&lt;p&gt;I knew I would use this setup again and again, so containing it in a template I could use to start my projects seemed to make sense. I started building the template when I finished the refactor.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;more-problems&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;More Problems&lt;/h2&gt;

&lt;p&gt;The template started off as a bunch of files in a GitHub repo. It contained the &lt;code&gt;.less&lt;/code&gt; and &lt;code&gt;.json&lt;/code&gt; files and other things, like the Grunt &amp;amp; Gulp files and a &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Another set of problems soon appeared:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;scaffolding this project from the repo wasn&#39;t convenient. Starting a project with it meant I would need to &lt;code&gt;git clone&lt;/code&gt; it to my machine.  But that would download a folder with the files and I just needed the files. So if I was starting a project from scratch, I would have to rename the downloaded folder to match the project. Or, if I already started a project in another folder, I would have to copy the downloaded repo files to that other folder.  All of this is doable...it&#39;s just not convenient.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the template contained LESS files but I knew there would be instances where I would need to use another pre-processor. For example: &lt;a href=&quot;http://jekyllrb.com/docs/assets/&quot;&gt;Jekyll has built-in Sass integration&lt;/a&gt; so using &lt;a href=&quot;http://sass-lang.com/&quot; title=&quot;Review the Sass pre-processor&quot;&gt;Sass&lt;/a&gt; in that situation may make more sense.  And what if I wanted to use another pre-processor like &lt;a href=&quot;http://learnboost.github.io/stylus/&quot; title=&quot;Read more about Stylus&quot;&gt;Stylus&lt;/a&gt; someday? Plus, I want to use &lt;a href=&quot;https://github.com/reworkcss/rework&quot;&gt;Rework&lt;/a&gt; at some point because it lets you build a customizable pre-processor. So there may be times in the future when I don&#39;t need LESS, Sass or another CSS pre-processor. Either way, the template needed to be flexible enough for me to add/remove pre-processors as I saw fit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the template contained a &lt;code&gt;.gitignore&lt;/code&gt; that listed some common files that should be ignored from Git commits. But my day job requires my working in a Microsoft .NET environment built around best practices codified over the course of a decade. One of these best practices is using  &lt;a href=&quot;https://www.visualstudio.com/en-us/products/tfs-overview-vs.aspx&quot; title=&quot;Review Microsoft&#39;s Team Foundation Server&quot;&gt;Microsoft TFS&lt;/a&gt; for version control, not Git.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the template was configured really well for single page applications (SPAs), but I also do a fair amount of WordPress work.  The template wasn&#39;t really set up for that: some Gulp/Grunt plugins wouldn&#39;t work, the CSS would need a slightly difference build-out process and the &lt;code&gt;.gitignore&lt;/code&gt; would need some files added to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making the tool work for .NET and WordPress environments meant Jade didn&#39;t need to be add to a project by default.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So a downloadable template wouldn&#39;t work because it would be too opinionated. It would assume that every project required the same tooling/dev environment setup...which isn&#39;t true.&lt;/p&gt;

&lt;p&gt;It was clear that I had to find a way to programmatically scaffold each project so I could configure it based on a set of passed (or not-passed) options. &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; is the current popular scaffolding app and I could have spent some time searching through &lt;a href=&quot;http://yeoman.io/generators/&quot; title=&quot;Review Yeoman&#39;s generators&quot;&gt;Yeoman&#39;s generators&lt;/a&gt; to find what I needed.&lt;/p&gt;

&lt;p&gt;But what I wanted was too specific so I doubted the Yeoman could help. So I decided to use Node to try and build the tool for this.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;tool-building-process&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;The Tool-Building Process&lt;/h2&gt;

&lt;p&gt;I asked around and did some Google searches, trying to figure out the best way to do this. It took me two nights to get files and folders to either download or be created with a Node command.&lt;/p&gt;

&lt;p&gt;From there, I became ridiculously anal-retentive and spent three weeks (THREE WEEKS) getting things to look and act how I wanted them to.  This was mostly centered around logging: what messages were sent to the terminal console as the app progressed, what it took to get them to appear in the proper order, etc.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;final-command&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;The Final Command&lt;/h2&gt;

&lt;p&gt;The end result of all this is &lt;code&gt;kdz&lt;/code&gt;: a Node tool that lets me scaffold  a project and add small set of options. It downloads files from a GitHub repo, and it also creates files &amp;amp; folders....all in a programmatic way.&lt;/p&gt;

&lt;p&gt;After you install it, typing &lt;code&gt;kdz&lt;/code&gt; from anywhere in the terminal runs the &lt;code&gt;--help&lt;/code&gt; command and outputs this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;Usage: &amp;quot;kdz&amp;quot; [options] [command]


  Commands:

    app   scaffold a basic web application
    dt    delete &amp;quot;test-build&amp;quot; folder

  Options:

    -h, --help       output usage information
    -V, --version    output the version number
    -w, --wordpress  create a WordPress project
    -g, --gitignore  download &amp;quot;.gitignore&amp;quot; file
    -l, --less       download LESS files in &amp;quot;css-build&amp;quot;
    -s, --scss       download Sass files in &amp;quot;css-build&amp;quot;
    -t, --test       do a test scaffold in &amp;quot;test-build&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Just two commands for now...&lt;code&gt;app&lt;/code&gt; and &lt;code&gt;dt&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Running &lt;code&gt;kdz app&lt;/code&gt; scaffolds out a SPA-like project by performing the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;build&lt;/code&gt; folder is created with &lt;code&gt;css&lt;/code&gt; and &lt;code&gt;js&lt;/code&gt; subdirectories.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;coffee&lt;/code&gt; folder is created and a &lt;code&gt;main.coffee&lt;/code&gt; file is created inside of it.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;css-build&lt;/code&gt; folder is created with an &lt;code&gt;imports&lt;/code&gt; folder, and an empty &lt;code&gt;image-min&lt;/code&gt; folder is created (images that need to be minified go here).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bower.json&lt;/code&gt;, &lt;code&gt;.bowerrc&lt;/code&gt; and &lt;code&gt;STYLEGUIDE.md&lt;/code&gt; files are downloaded from the &lt;code&gt;source-shared-files&lt;/code&gt; directory in the &lt;code&gt;kdz&lt;/code&gt; repo.&lt;/li&gt;
&lt;li&gt;SPA-like &lt;code&gt;Gruntfile.js&lt;/code&gt;, &lt;code&gt;gulpfile.js&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files are downloaded from the &lt;code&gt;source-spa&lt;/code&gt; directory in the &lt;code&gt;kdz&lt;/code&gt; repo.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The final build looks like this:&lt;/li&gt;
&lt;/ul&gt;


&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;├── build
|   ├── css
|   └── js
        └── libs
├── coffee
|   └── main.coffee
├── image-min
├── css-build
|   └── imports
├── .bowerrc
├── bower.json
├── Gruntfile.js
├── gulpfile.js
├── package.json
└── STYLEGUIDE.md&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;--test flag&lt;/code&gt; is passed to &lt;code&gt;kdz app&lt;/code&gt;, a &lt;code&gt;test-build&lt;/code&gt; folder is created, then a test scaffold goes into that folder. &lt;code&gt;kdz dt&lt;/code&gt; is a quick way of deleting &lt;code&gt;test-build&lt;/code&gt; after the testing is done and was used for &lt;code&gt;kdz&lt;/code&gt; development purposes only. It plays no role in getting a web dev project done.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Along with &lt;code&gt;--test&lt;/code&gt; and the standard &lt;code&gt;--help&lt;/code&gt; and &lt;code&gt;--version&lt;/code&gt;, there are a small set of options that can be passed to a command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;--wordpress&lt;/code&gt; option scaffolds out a WordPress-like project. It performs almost the same tasks as &lt;code&gt;kdz app&lt;/code&gt; with the following differences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;build&lt;/code&gt; folder and its subdirectories are not created.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;Gruntfile.js&lt;/code&gt;, &lt;code&gt;gulpfile.js&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files that are downloaded are more geared toward WordPress development and downloaded from the &lt;code&gt;source-wordpress&lt;/code&gt; folder in the &quot;kdz&quot; repo.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;functions.php&lt;/code&gt; file is downloaded.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The final build looks like this:&lt;/li&gt;
&lt;/ul&gt;


&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;├── coffee
|   └── main.coffee
├── image-min
├── css-build
|   └── imports
├── .bowerrc
├── bower.json
├── functions.php
├── Gruntfile.js
├── gulpfile.js
├── package.json
└── STYLEGUIDE.md&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;--gitignore&lt;/code&gt; option downloads a &lt;code&gt;.gitignore&lt;/code&gt; file from &lt;code&gt;source-spa&lt;/code&gt; to the root folder by default. But if the &lt;code&gt;--wordpress&lt;/code&gt; option is passed, &lt;code&gt;.gitignore&lt;/code&gt; will be WordPress-specific and downloaded from &lt;code&gt;source-wordpress&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;--less&lt;/code&gt; option downloads LESS files from &lt;code&gt;source-spa&lt;/code&gt; to &lt;code&gt;css-build&lt;/code&gt; and &lt;code&gt;css-build/imports&lt;/code&gt; by default. But if the &lt;code&gt;--wordpress&lt;/code&gt; option is passed, the LESS files will be WordPress-specific and downloaded from &lt;code&gt;source-wordpress&lt;/code&gt;. As mentioned, the &lt;code&gt;.less&lt;/code&gt; files are named based on Bootstrap-defined media queries so the final build would look like this:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;css-build
 ├── style.less
 └── imports
     ├── all-transform-3d-webkit-transform-3d.less
     ├── bootstrap-override.less
     ├── for.less
     ├── globals.less
     ├── max-device-width-480-orientation-landscape.less
     ├── max-width-767.less
     ├── min-width-1200.less
     ├── min-width-768-max-width-991.less
     ├── min-width-768.less
     ├── min-width-992-max-width-1199.less
     ├── min-width-992.less
     ├── mixins.less
     ├── mobile_first.less
     ├── retina-media-queries.less
     ├── screen-and-max-width-767.less
     ├── screen-and-min-width-768.less
     ├── screen-webkit-min-device-pixel-ratio-0.less
     ├── screen-webkit-min-device-pixel-ratio-0
     └── variables.less&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;--scss&lt;/code&gt; option does pretty much what &lt;code&gt;--less&lt;/code&gt; does, except it downloads Sass files from &lt;code&gt;source-spa&lt;/code&gt; to &lt;code&gt;css-build&lt;/code&gt; and &lt;code&gt;css-build/imports&lt;/code&gt; by default. But if the &lt;code&gt;--wordpress&lt;/code&gt; option is passed, the Sass files will be WordPress-specific and downloaded from &lt;code&gt;source-wordpress&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are slight variations among the LESS and Sass builds based on my self-imposed rules. For example: the &lt;code&gt;globals.less&lt;/code&gt; file exists for a reason and although there&#39;s a &lt;code&gt;for.less&lt;/code&gt; file, there&#39;s no &lt;code&gt;for.scss&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Learn about these variations and rules over on &lt;a href=&quot;https://github.com/kaidez/kdz/blob/master/source-shared-files/STYLEGUIDE.md#understand-the-basic-structure&quot;&gt;the &quot;Understand the Basic structure&quot; section in repo&#39;s style guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;behind-the-scenes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Behind The Scenes&lt;/h2&gt;

&lt;p&gt;Some interesting points about how &quot;kdz&quot; works behind the scenes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Obviously, &quot;kdz&quot; was built with Node.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/commander&quot; title=&quot;Read about the npm commander module&quot;&gt;commander&lt;/a&gt; was the key package used to build this tool. It&#39;s what I used to configure the commands and options. Thanks to &lt;a href=&quot;https://twitter.com/rogden83&quot; title=&quot;Visit Ryan Ogden on Twitter&quot;&gt;Ryan Ogden at Expand The Room&lt;/a&gt; for turning me on to it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/q&quot; title=&quot;Read about the npm q module&quot;&gt;q&lt;/a&gt; was used to manage &lt;a href=&quot;https://promisesaplus.com/&quot; title=&quot;Read the Promises/A+ specification&quot;&gt;JS Promises&lt;/a&gt;. Node runs things asynchronously and I had to make sure that a certain step didn&#39;t run until some other steps ran before it. q properly managed that process.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://www.npmjs.com/package/download&quot; title=&quot;Read about the npm download module&quot;&gt;download&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/download-status&quot; title=&quot;Read about the npm download-status module&quot;&gt;download-status&lt;/a&gt; modules work together to download files from the repo and display how the download is progressing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/chalk&quot; title=&quot;Read about the npm chalk module&quot;&gt;chalk&lt;/a&gt; adds some pretty sweet coloring to the outputted console statements.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;todo&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;What&#39;s Left To Do&lt;/h2&gt;

&lt;p&gt;A lot. The repo&#39;s README has a &lt;a href=&quot;https://github.com/kaidez/kdz#todowish-list&quot; title=&quot;Read the TODO list on the &amp;quot;kdz&amp;quot; repo&quot;&gt;TODO list&lt;/a&gt; of things I need/want to do, but here are the main things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;get &quot;kdz&quot; working on Windows:&lt;/strong&gt; we&#39;re at the point where there&#39;s no good reason for a Node app to work on Unix-like systems only.  Microsoft&#39;s done far too much good work in getting Node to work on their operating systems and Azure: I think &quot;kdz&quot; should respect that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;make the Promises neater:&lt;/strong&gt; I used Promises primarily to make sure the console logging happened in the proper order and while I&#39;m (pretty) sure I implemented them properly, the code is spaghetti-like. This is the main reason why &quot;kdz&quot; is at v0.0.1 and I&#39;d like to try and clean up the Promises before bumping a lot versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;make a small library of methods:&lt;/strong&gt; I spent a day looking at spots where the code was repetitive, then placing that code in a reusable function that all the spots could use. There are other spots that can use this: lots of spots use &lt;a href=&quot;https://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback&quot; title=&quot;Read about Node fs.open&quot;&gt;Node&#39;s fs.open() method&lt;/a&gt; to check for the existence of a given file or folder. Placing that chunk in a library with a bunch of other reusable methods makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;make the options run on their own:&lt;/strong&gt; right now, the &lt;code&gt;--gitignore&lt;/code&gt;, &lt;code&gt;--less&lt;/code&gt;, &lt;code&gt;--sass&lt;/code&gt; and &lt;code&gt;--wordpress&lt;/code&gt; won&#39;t run unless they&#39;re passed as options to commands. In other words, running &lt;code&gt;kdz app&lt;/code&gt; will scaffold a basic project but if I want to download Sass files sometime after that, I would have to run &lt;code&gt;kdz app -s&lt;/code&gt;. Sass files should be able to be downloaded without the &lt;code&gt;app&lt;/code&gt; command so I&#39;m working on that.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;further-reading&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;A main reason that I didn&#39;t write a tutorial was because there are so many good ones already out there. I found the &lt;a href=&quot;http://cruft.io/posts/node-command-line-utilities/&quot;&gt;&lt;em&gt;Command-line utilities with Node.js&lt;/em&gt; article by Glynn Phillips &lt;/a&gt; to be the best one...I&#39;d start there.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://nodejs.org/api/&quot; title=&quot;Read the Node API&quot;&gt;Node API docs&lt;/a&gt; are also a read. It&#39;s verbose in some spots but after pushing through it, I was able to write my own Node code where I would usually use a plugin...GOOD FOR ME!!!&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&quot;kdz&quot; gives me the flexibility I needed. So back to the pre-processor conversation, I can add LESS and Sass files to a project by passing one of their respective options, but don&#39;t have to pass any options if I want to use Rework.&lt;/p&gt;

&lt;p&gt;And if every want to be able to configure Stylus or Jade for a project, I can just add an option to &quot;kdz&quot;.  This will be really easy if I add a method library.&lt;/p&gt;

&lt;p&gt;I&#39;m glad creating &quot;kdz&quot; solved my problem but the BEST thing about building it was the amount of new Node knowledge I gained in the end. I had used Node before this and I understood it better once I started using Gulp.&lt;/p&gt;

&lt;p&gt;But this project exposed me to ton of Node stuff. I gained a really good understanding of how Node interacts with a file system and all the quirks that come with exporting and requiring modules, along with some other things.&lt;/p&gt;

&lt;p&gt;I also learned more about Promises and much they go hand-in-hand with Node. For all the issues with my Promise code, I better understand them now and see how they make Node development easier.&lt;/p&gt;

&lt;p&gt; I still have more work to do: I really want to add more &quot;Node stuff&quot; to &quot;kdz&quot; instead of adding more &quot;Node modules&quot;. By that, I mean that I want to use things like &lt;code&gt;.pipe()&lt;/code&gt; and &lt;code&gt;process.nextTick()&lt;/code&gt; to see if they let me do things without requiring a bunch of pre-built npm modules.&lt;/p&gt;

&lt;p&gt;But overall, creating &quot;kdz&quot; was one of the best web development experiences I&#39;ve had in a while and can&#39;t wait to continue developing it. If not to continue solving a problem, then to get Node to bend to my will some more.&lt;/p&gt;
</description>
				<pubDate>Fri, 13 Mar 2015 00:00:00 -0400</pubDate>
				<link>http://kaidez.com/kdz-build-tool/</link>
				<guid isPermaLink="true">http://kaidez.com/kdz-build-tool/</guid>
			</item>
		
			<item>
				<title>AJAX Tutorial Update</title>
				<description>&lt;p&gt;Happy 10th Birthday AJAX!!!!&lt;/p&gt;

&lt;p&gt;Ten years ago today, web developer &lt;a href=&quot;http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/&quot;&gt;Jesse James Garrett wrote his ground-breaking AJAX article&lt;/a&gt; and changed the world in the process. At least the world of web development.&lt;/p&gt;

&lt;p&gt;If you&#39;re reading this and are a non-technical person, understand that AJAX described an efficient method to load content onto a web page.  This method &lt;em&gt;would&lt;/em&gt; come about eventually...the Internet was evolving towards it.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;if&lt;/em&gt; AJAX didn&#39;t happen for some bizarre reason, then the growth of the Internet would have stagnated. And Facebook, Twitter, Instagram, Foursquare, Pinterest, Apple and Google (&lt;em&gt;especially&lt;/em&gt; Google) wouldn&#39;t have enjoyed the success they&#39;re enjoying today.&lt;/p&gt;

&lt;p&gt;I have a really old AJAX tutorial that&#39;s in need of a serious update. So in honor of this birthday, I&#39;m releasing &lt;a href=&quot;/ajax-tutorial/&quot;&gt;an updated new, in-depth AJAX tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A preamble...&lt;/p&gt;

&lt;p&gt;Every January 1st, I review my site&#39;s traffic for the previous year. For the past two years, my tutorial titled &lt;a href=&quot;/ajax-jquery-html5-work-together/&quot;&gt;&quot;How AJAX, HTML5 and jQuery Work Together&quot;&lt;/a&gt; is always close to the top.&lt;/p&gt;

&lt;p&gt;Again, this article is old...it was published on January 11th, 2011. Looking at it from that point a view, the article has some issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I readily admit to doing some keyword stuffing for this post. I didn&#39;t need to mention &quot;HTML5&quot; in the article because you can do AJAX stuff without it. HTML5 was a hot topic at the time and although I did tie it to AJAX, I didn&#39;t need to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The old post discussed jQuery&#39;s AJAX functionality when jQuery was at version 1.4.4. But when jQuery went to 1.5, its AJAX engine got a major rewrite. It was made to be faster and also introduced the concept of Promises via its AJAX-based jqXHR object.  jQuery&#39;s use of Promises is controversial, but still worth knowing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Another issue: Google Analytics showed that this post received little engagement despite the high traffic it was getting. People were staying on for a few seconds at most, no one shared it on social networks or linked to it.&lt;/p&gt;

&lt;p&gt;My tutorial on &lt;a href=&quot;/remove-files-from-github/&quot;&gt;removing files from GitHub&lt;/a&gt; was in the exact same position and I rewrote it in the hopes of increasing engagement...&lt;a href=&quot;/github-tutorial-update/&quot;&gt;read about that here&lt;/a&gt;. I got to the point of the tutorial much quicker, made the content more &quot;scannable&quot;, removed the images and used shorter words where possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The result of all this was an average of 1.5+ minutes more spent on the page and more Twitter shares&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I&#39;m happy with that.&lt;/p&gt;

&lt;p&gt;All this showed me that it&#39;s worth it to rewrite a post when the numbers indicate it, so I rewrote the AJAX post as a direct result. There are a few significant changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Where I shorten the GitHub post&#39;s content, the new AJAX page&#39;s content is longer...much, much longer. I&#39;ll concede this is a bit of a risk so in order to make things as easy to read as possible, I included a very scannable in-page navigation, added links throughout the post which jump back to the navigation, performed readability tests with &lt;a href=&quot;https://readability-score.com/&quot;&gt;Readability Score&lt;/a&gt; and used as many short words as possible.  All told, it took me a month to rewrite this tutorial to the point that I was 100% comfortable with its content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focused more on jQuery&#39;s excellent AJAX functionality and discussed its (controversial) Promise functionality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Included lots of demos that can be viewed as well as &lt;a href=&quot;https://github.com/kaidez/ajax-tutorial-samples&quot;&gt;downloaded from GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I&#39;m trying to get the search engines to view this page as &quot;cornerstone content&quot;, content that represents the best of the best on my blog. In that scenario, it&#39;s best to treat the content as a &quot;page&quot; and not a &quot;blog post&quot;. I did this by changing things around in my site structure as well as link to this article in the site&#39;s main navigation, all in the hopes of the search engines understanding that this content is top-notch. Yoast has &lt;a href=&quot;https://yoast.com/cornerstone-content-rank/&quot;&gt;an excellent post on setting up cornerstone content&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a sidenote, the site navigation was redone overall. Along with adding a direct link to the AJAX tutorial, the various site categories and are condensed under a single &quot;BLOG&quot; link. I&#39;ve also directly-linked to my site&#39;s newly-created &quot;ARTICLES&quot; section, which contains content that I consider high-quality. For now, this section just contains the AJAX tutorial and the page that discusses my lynda.com courses, which is also placed as a link in the main navigation. These two articles are things I&#39;m trying to monetize so I&#39;m trying to make them as high-profile on my blog as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Speaking of monetizing things, I farmed myself out a little with this tutorial by advertising it on both Twitter and Facebook. Don&#39;t know how this will go but I&#39;ll be watching.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I wanted to discuss jQuery Promises a little more and discuss &lt;a href=&quot;http://www.w3.org/TR/XMLHttpRequest2/&quot;&gt;XHR2&lt;/a&gt;, but all this would make the article longer than it already is and I want to avoid that. If this tutorial is well-received, I&#39;ll update things and consider adding those things.&lt;/p&gt;

&lt;p&gt;Finally, if you read this I&#39;m REALLY curious about your feedback. Is it too long? Too short? Is an important part not covered? Or covered too much?&lt;/p&gt;

&lt;p&gt;Please let me know by either add a comment to this blog post or created an issue in &lt;a href=&quot;https://github.com/kaidez/ajax-tutorial-samples/issues&quot;&gt;the tutorial&#39;s issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, please check out the updated &lt;a href=&quot;/ajax-tutorial/&quot;&gt;AJAX beginners tutorial&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Wed, 18 Feb 2015 00:00:00 -0500</pubDate>
				<link>http://kaidez.com/update-ajax-tutorial/</link>
				<guid isPermaLink="true">http://kaidez.com/update-ajax-tutorial/</guid>
			</item>
		
			<item>
				<title>TUTORIAL: Filter Content With jQuery.filter() & jQuery Selectors</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://codepen.io/kaidez/pen/azmRXm&quot; class=&quot;demoLink&quot; target=&quot;blank&quot;&gt;VIEW THE DEMO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had a project where I needed to create functionality that filtered out specific page content on a link click. So if the page had three different content groups, clicking on a link had to display one group while removing the other two from view.&lt;/p&gt;

&lt;p&gt;I built the functionality using data attributes, jQuery&#39;s .filter() method, and some jQuery selector methods. There are certainly different ways to filter page content, but this is how I did it.&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#brief-look-css&quot;&gt;A (very) brief look at the CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html-first-look&quot;&gt;A first look at the HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-html-sections&quot;&gt;The 2 sections of the HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html-section-binding&quot;&gt;The binding of the two HTML sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript-first-look&quot;&gt;A first look at the JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#feature-detect-data-attributes&quot;&gt;Feature-detect for data attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-attribute-selectors&quot;&gt;Using jQuery attribute selectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#add-remove-content&quot;&gt;Adding &amp;amp; removing content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#show-all-content&quot;&gt;Show all the content with a click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#notes&quot;&gt;Some notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;brief-look-css&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;A (very) brief look at the CSS&lt;/h3&gt;

&lt;p&gt;We&#39;re using three files for our code: &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;styles.css&lt;/code&gt; and &lt;code&gt;main.js&lt;/code&gt;.  All the files are in the same directory.&lt;/p&gt;

&lt;p&gt;The things in &lt;code&gt;styles.css&lt;/code&gt; are here to give the page some style and have  nothing to do with the functionality. We won&#39;t discuss them in depth, but here they are:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-css&#39;&gt;body {
  background-color: rgba(60, 105, 145, 1);
  color: rgba(255, 255, 255, 1);
  font-family: &amp;#39;Helvetica Neue&amp;#39;,Helvetica,Arial,sans-serif;
  font-size: 20px;
}

a {
  margin:0 5px;
}

a:link {
  color: rgba(100, 255, 0, 1);
}

a:visited {
  color: rgba(100, 255, 0, 1);
}

a:hover {
  color: rgba(0, 255, 193, 1);
  text-decoration: none;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a name=&quot;html-first-look&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;A first look at the HTML&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; file looks like this...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Filter Content On A Click With jQuery&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;styles.css&amp;quot; media=&amp;quot;all&amp;quot; /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Filter by team&amp;lt;/h1&amp;gt;

    &amp;lt;!-- The Teams --&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;btn-player&amp;quot; data-team=&amp;quot;chelsea&amp;quot;&amp;gt;Chelsea&amp;lt;/a&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;btn-player&amp;quot; data-team=&amp;quot;psg&amp;quot;&amp;gt;Paris St-Germain&amp;lt;/a&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;btn-player&amp;quot; data-team=&amp;quot;real-madrid&amp;quot;&amp;gt;Real Madrid&amp;lt;/a&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;btn-player&amp;quot; data-team=&amp;quot;barcelona&amp;quot;&amp;gt;Barcelona&amp;lt;/a&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot; id=&amp;quot;btn-show-all&amp;quot;&amp;gt;SHOW ALL PLAYERS&amp;lt;/a&amp;gt;

    &amp;lt;!-- The Players --&amp;gt;
    &amp;lt;div class=&amp;quot;player&amp;quot; data-players-team=&amp;quot;chelsea&amp;quot;&amp;gt;Cesc Fabregas&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;player&amp;quot; data-players-team=&amp;quot;psg&amp;quot;&amp;gt;Zlatan Ibrahimović&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;player&amp;quot; data-players-team=&amp;quot;real-madrid&amp;quot;&amp;gt;Cristiano Ronaldo&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;player&amp;quot; data-players-team=&amp;quot;chelsea&amp;quot;&amp;gt;Didier Drogba&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;player&amp;quot; data-players-team=&amp;quot;chelsea&amp;quot;&amp;gt;John Terry&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;player&amp;quot; data-players-team=&amp;quot;barcelona&amp;quot;&amp;gt;Lionel Messi&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;player&amp;quot; data-players-team=&amp;quot;real-madrid&amp;quot;&amp;gt;Sergio Ramos&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;player&amp;quot; data-players-team=&amp;quot;chelsea&amp;quot;&amp;gt;Thibault Courtois&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;player&amp;quot; data-players-team=&amp;quot;psg&amp;quot;&amp;gt;Thiago Motta&amp;lt;/div&amp;gt;

    &amp;lt;!-- Note that we&amp;#39;re using the oldIE-friendly version of jQuery --&amp;gt;
    &amp;lt;script src=&amp;quot;http://code.jquery.com/jquery-1.11.1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a name=&quot;2-html-sections&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;The 2 sections of the HTML&lt;/h3&gt;

&lt;p&gt;The page has two distinct sections: a list of &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags at the top and a list of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags at the bottom. Except for the last one, every item in the top list has a class name of &lt;code&gt;btn-player&lt;/code&gt; and a data attribute called &lt;code&gt;data-team&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice that the values of the &lt;code&gt;data-team&lt;/code&gt; attribute differ across the links that have it. There are four different values: 1) &lt;code&gt;chelsea&lt;/code&gt;, 2) &lt;code&gt;psg&lt;/code&gt;, 3) &lt;code&gt;real-madrid&lt;/code&gt; and 4) &lt;code&gt;barcelona&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the bottom of this list is a link with an ID of &lt;code&gt;#btn-show-all&lt;/code&gt;. We&#39;ll build functionality where clicking on this link will add back any content that has been removed.&lt;/p&gt;

&lt;p&gt;Every item in the bottom list is a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with a class name of &lt;code&gt;player&lt;/code&gt; and a data attribute called &lt;code&gt;data-players-team&lt;/code&gt;. The &lt;code&gt;player&lt;/code&gt; class name is important and will be discussed but for now, notice that the values of the &lt;code&gt;data-players-team&lt;/code&gt; attribute is shared across some of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;For example: four tags have their &lt;code&gt;data-players-team&lt;/code&gt; value set to &lt;code&gt;chelsea&lt;/code&gt;, two of them have their attribute set &lt;code&gt;psg&lt;/code&gt;. And so on and so on.
&lt;a name=&quot;html-section-binding&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;The binding of the two HTML sections&lt;/h3&gt;

&lt;p&gt;The values of the &lt;code&gt;data-players-team&lt;/code&gt; attribute in the section below matches the value of one of the &lt;code&gt;data-team&lt;/code&gt; attributes in the section above. So the four tags with a &lt;code&gt;data-players-team&lt;/code&gt; attribute with a value of &lt;code&gt;chelsea&lt;/code&gt; match the value of the &lt;code&gt;data-team&lt;/code&gt; attribute in the first &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag: it&#39;s value is also &lt;code&gt;chelsea&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These shared values create a binding between the two sections, As a result, when of a link is clicked, it will understand that it&#39;s their bound &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags that should be visible.
&lt;a name=&quot;javascript-first-look&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;A first look at the JavaScript&lt;/h3&gt;

&lt;p&gt;But this is only a small part of the binding process...jQuery does a lot here, too.  That code is in &lt;code&gt;main.js&lt;/code&gt; and looks like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;$( &amp;quot;.btn-player&amp;quot; ).click(function(){

  var getLinkType, getElType, getElNotType;

  // Feature-detect for dataset support
  if( !this.dataset ) { // If IE 10 or lower
    getLinkType = this.getAttribute( &amp;quot;data-team&amp;quot; );
   } else { // For other browsers
     getLinkType = this.dataset.team;
   }

  getElType = $( &amp;quot;div[data-players-team~=&amp;quot;+getLinkType+&amp;quot;]&amp;quot; );

  getElNotType = $( &amp;quot;div[data-players-team!=&amp;quot;+getLinkType+&amp;quot;]&amp;quot; );

   $( &amp;quot;.player&amp;quot; ).filter( getElNotType ).css( &amp;quot;display&amp;quot;, &amp;quot;none&amp;quot; );
   $( &amp;quot;.player&amp;quot; ).filter( getElType ).css( &amp;quot;display&amp;quot;, &amp;quot;block&amp;quot; );

});

$( &amp;quot;#btn-show-all&amp;quot; ).click(function() {
  $( &amp;quot;.player&amp;quot; ).css( &amp;quot;display&amp;quot;, &amp;quot;block&amp;quot; );
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Quite a bit to discuss here...let&#39;s break it down:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;$( &amp;quot;.btn-player&amp;quot; ).click(function(){
  ...
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;There are four links at the top with a class name of &lt;code&gt;btn-player&lt;/code&gt;. Whenever one of those buttons is clicked, a function performs some tasks.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var getLinkType, getElType, getElNotType;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;List three variables in a single var pattern for future use.
&lt;a name=&quot;feature-detect-data-attributes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Feature-detect for data attributes&lt;/h3&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;// Feature-detect for dataset support
if( !this.dataset ) { // If IE 10 or lower
  getLinkType = this.getAttribute( &amp;quot;data-team&amp;quot; );
} else { // For other browsers
  getLinkType = this.dataset.team;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;All the links with a &lt;code&gt;btn-player&lt;/code&gt; class have a &lt;code&gt;data-team&lt;/code&gt; attribute. When one of those links gets clicked, we need to find that attribute&#39;s value and store it in the previously-created &lt;code&gt;getLinkType&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;We can find the value by looking directly at link&#39;s dataset property by saying &lt;code&gt;this.dataset&lt;/code&gt;. But dataset isn&#39;t supported in Internet Explorer 10 and lower, so we need to provide fallback code for those browsers by applying feature detection.&lt;/p&gt;

&lt;p&gt;We&#39;ll start by checking to see if the clicked-on link does NOT have a &lt;code&gt;dataset&lt;/code&gt; property and if it doesn&#39;t, we&#39;ll use the &lt;code&gt;getAttribute()&lt;/code&gt; method to find the value of &lt;code&gt;data-team&lt;/code&gt; and store it in the &lt;code&gt;getLinkType&lt;/code&gt; variable. But for other browsers, we can use &lt;code&gt;dataset&lt;/code&gt; to do the finding and storing.&lt;/p&gt;

&lt;p&gt;For a more in-depth discussion about data attributes and &lt;code&gt;getAttribute()&lt;/code&gt;, &lt;a href=&quot;/load-data-attributes-mouseclicks/&quot; title=&quot;Read kaidez&#39;s blog post on loading in page content with data attributes&quot;&gt;read my data attributes post&lt;/a&gt;.
&lt;a name=&quot;jquery-attribute-selectors&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Using jQuery attribute selectors&lt;/h3&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;getElType = $( &amp;quot;div[data-players-team~=&amp;quot;+getLinkType+&amp;quot;]&amp;quot; );&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;jQuery&#39;s &quot;Attribute Contains&quot; selector functionality can help us here. jQuery has a lot of uses for this selector but in this case, we&#39;re using the &lt;a href=&quot;http://api.jquery.com/attribute-contains-word-selector/&quot;&gt;Attribute Contains Word Selector&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this case, &quot;Attribute Contains&quot; uses &lt;code&gt;~&lt;/code&gt; to look any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; whose &lt;code&gt;data-players-team&lt;/code&gt; value EXACTLY matches the value of &lt;code&gt;getLinkType&lt;/code&gt;. The total &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags that match this criteria are stored in the previously-created &lt;code&gt;getElType&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;In other words, if the &lt;code&gt;.btn-player&lt;/code&gt; button that gets clicked has a &lt;code&gt;data-team&lt;/code&gt; value of &lt;code&gt;chelsea&lt;/code&gt;, then &lt;code&gt;chelsea&lt;/code&gt; gets stored in &lt;code&gt;getLinkType&lt;/code&gt;. Then, the &quot;Attribute Contains&quot; code will look for any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; whose &lt;code&gt;data-players-team&lt;/code&gt; value matches &lt;code&gt;chelsea&lt;/code&gt;...it will find four &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags in this case.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;getElNotType = $( &amp;quot;div[data-players-team!=&amp;quot;+getLinkType+&amp;quot;]&amp;quot; );&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Almost the same code as just-discussed except we&#39;re now using jQuery&#39;s &lt;a href=&quot;http://api.jquery.com/attribute-not-equal-selector/&quot;&gt;Attribute Not Equal Selector&lt;/a&gt; (note the &quot;!&quot; that&#39;s now before the &quot;=&quot; in the code instead of &quot;~&quot;). As you&#39;ve may have guessed, this code is looking for all the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags that have &lt;code&gt;data-players-team&lt;/code&gt; values that do NOT match &lt;code&gt;getLinkType&lt;/code&gt;, then stores them in a variable called &lt;code&gt;getElNotType&lt;/code&gt;.
&lt;a name=&quot;add-remove-content&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Adding &amp;amp; removing content&lt;/h3&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;$( &amp;quot;.player&amp;quot; ).filter( getElNotType ).css( &amp;quot;display&amp;quot;, &amp;quot;none&amp;quot; );&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Lots jQuery chaining now...&lt;/p&gt;

&lt;p&gt;All the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags at the bottom have a class called &lt;code&gt;.player&lt;/code&gt; and we&#39;re finding them in the DOM with jQuery. Plus, they&#39;re all contained in either the &lt;code&gt;getElType&lt;/code&gt; or the &lt;code&gt;getElNotType&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;We first, use jQuery&#39;s &lt;code&gt;.filter()&lt;/code&gt; method to &quot;filter&quot;, or &quot;pick out&quot; all the &lt;code&gt;.player&lt;/code&gt; elements that are contained in &lt;code&gt;getElNotType&lt;/code&gt;, which are the ones we DON&#39;T want to display. From there, we use jQuery&#39;s &lt;code&gt;.css()&lt;/code&gt; method to apply an inline style of &lt;code&gt;display:none;&lt;/code&gt; to these particular &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, removing them from view if they&#39;re not removed already.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;$( &amp;quot;.player&amp;quot; ).filter( getElType ).css( &amp;quot;display&amp;quot;, &amp;quot;block&amp;quot; );&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Next, we do the opposite: we look for any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with a &lt;code&gt;.player&lt;/code&gt; class and use &lt;code&gt;.filter()&lt;/code&gt; to filter out those stored in &lt;code&gt;getElType&lt;/code&gt;, which are the ones we DO want to display. Then use &lt;code&gt;css()&lt;/code&gt; to apply an inline style of &lt;code&gt;display:block;&lt;/code&gt; to these particular &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, making them visible if they&#39;re not visible already.
&lt;a name=&quot;show-all-content&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Show all the content with a click&lt;/h3&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;$( &amp;quot;#btn-show-all&amp;quot; ).click(function() {
  $( &amp;quot;.player&amp;quot; ).css( &amp;quot;display&amp;quot;, &amp;quot;block&amp;quot; );
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We&#39;ll end our code with functionality that makes any hidden &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags visible. The very last link at the top of the page has an ID of &lt;code&gt;#btn-show-all&lt;/code&gt;: when clicked, it uses jQuery to find all the &lt;code&gt;.player&lt;/code&gt; elements and if any are set to &lt;code&gt;display:none;&lt;/code&gt; they&#39;ll be set to &lt;code&gt;display:block;&lt;/code&gt;.
&lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Some Notes&lt;/h3&gt;

&lt;p&gt;That&#39;s it for the code....here are a few interesting things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This code does not work on IE 8 and lower...and I don&#39;t care.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We only used two jQuery attribute selectors here but there are many more and they&#39;re all useful. &lt;a href=&quot;http://api.jquery.com/category/selectors/&quot; title=&quot;Read about jQuery Selectors on the jQuery API site&quot;&gt;Read about the jQuery Selector API&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While we had to do &lt;code&gt;dataset&lt;/code&gt; feature detection for the &lt;code&gt;data-team&lt;/code&gt; attribute, take note that we didn&#39;t have to do that for &lt;code&gt;data-players-team&lt;/code&gt;. This is because we had to find the exact value of &lt;code&gt;data-team&lt;/code&gt; but with &lt;code&gt;data-players-team&lt;/code&gt;, we just need to see if it existed in the DOM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The part of the code that uses &lt;code&gt;$.filter()&lt;/code&gt; could be more elegant. It&#39;s written in a way that automatically assumes that all the &lt;code&gt;.player&lt;/code&gt; elements aren&#39;t in view, which isn&#39;t the case. So it&#39;s probably neater to use something like &lt;code&gt;if/else&lt;/code&gt; to check the DOM and see what elements are and aren&#39;t visible. But like any DOM checking, a search like that is a bit of a performance hit so it&#39;s left out of the code for that reason.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I may or may not do some performance tests to see how much of a hit I&#39;ll take doing an &lt;code&gt;if/else&lt;/code&gt; check but either way, I found this code to be a neater way of doing things when compared to some other implementations I commonly use. I like what I did here and will probably use the pattern again.&lt;/p&gt;

&lt;p&gt;Again, there may be other ways to do this...feel free to share alternatives.&lt;/p&gt;
</description>
				<pubDate>Fri, 02 Jan 2015 00:00:00 -0500</pubDate>
				<link>http://kaidez.com/filter-content-jquery/</link>
				<guid isPermaLink="true">http://kaidez.com/filter-content-jquery/</guid>
			</item>
		
			<item>
				<title>REVIEW: Effective JavaScript</title>
				<description>&lt;p&gt;&lt;em&gt;&quot;It very well may be the best JavaScript book ever written...read it!&quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There was a moment where I considered making that sentence the content for this entire post, and then just publishing it and moving on in an attempt to drive home how nothing more needs to be said about how brilliant this book is.&lt;/p&gt;

&lt;p&gt;But I guess I have to embellish...written by &lt;a href=&quot;https://twitter.com/littlecalculist&quot;&gt;Dave Herman&lt;/a&gt; from Mozilla, &lt;a href=&quot;http://www.amazon.com/gp/product/0321812182/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321812182&amp;amp;linkCode=as2&amp;amp;tag=kaidez-20&amp;amp;linkId=KC4WGKUBOQWXNFBA&quot;&gt;&lt;em&gt;Effective JavaScript&lt;/em&gt;&lt;/a&gt; is not a book with a lot of tutorials or explanations of a particular library or framework. This is a book that takes 68 specific concepts of the JavaScript language and explains them in depth, and with amazing clarity.&lt;/p&gt;

&lt;p&gt;For example: Item 6 clarifies one of the more contentious JavaScript subjects: semicolon placement and insertion. It analyzes how they do (and don&#39;t) work in JavaScript...how adding them in some code spots can prevent errors and how adding them in other spots can screw the code up.&lt;/p&gt;

&lt;p&gt;Chapter 3 contains 12 excellent items covering functions. Commonly complex subjects like &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; are fleshed out really REALLY well.&lt;/p&gt;

&lt;p&gt;For me personally, the sixth chapter on &quot;Library and API Design&quot; was worth the price of the book alone and &lt;a href=&quot;https://twitter.com/kaidez/status/507690685378887680&quot;&gt;I&#39;ve publicly said so&lt;/a&gt;. The day I learned the intricacies of what it takes to create jQuery-like chainable, configurable methods was a good day in my house.&lt;/p&gt;

&lt;p&gt;Also for me personally, parts I already understood were fleshed out.  Prototypes, JavaScript&#39;s inheritance paradigm, are something that I study constantly, but I still learned some new tips and tricks for implementing them.&lt;/p&gt;

&lt;p&gt;And that&#39;s the point: you will come across concepts that you&#39;ve already read about when reading &lt;em&gt;Effective JavaScript&lt;/em&gt;. Commonly recommended books like &lt;a href=&quot;http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;amp;tag=kaidez-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0596517742&quot;&gt;&lt;em&gt;JavaScript: The Good Parts&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/gp/product/0596806752/ref=as_li_tf_tl?ie=UTF8&amp;amp;tag=kaidez-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0596806752&quot;&gt;&lt;em&gt;JavaScript Patterns&lt;/em&gt;&lt;/a&gt; have covered lots of the material discussed in &lt;em&gt;Effective&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;Effective&lt;/em&gt; takes that material, along with many other popular JS concepts, and teaches you things you never knew about them. No matter how much you know about JS, you &lt;em&gt;will&lt;/em&gt; learn something new after reading this book.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Effective JavaScript&lt;/em&gt; is not a beginner&#39;s book and assumes you understand variables functions, objects and arrays. Having a basic understanding of how to use all those things in a function is assumed as well.&lt;/p&gt;

&lt;p&gt;If you understand all those things, you want to read &lt;em&gt;Effective JavaScript&lt;/em&gt; sooner than later. You may have read the both &lt;em&gt;The Good Parts&lt;/em&gt; and &lt;em&gt;Patterns&lt;/em&gt; as well (and you should at some point), but if you&#39;re an intermediate JavaScript developer, &lt;em&gt;Effective JavaScript&lt;/em&gt;  will change your life.&lt;/p&gt;

&lt;p&gt;That is all.&lt;/p&gt;
</description>
				<pubDate>Mon, 29 Dec 2014 00:00:00 -0500</pubDate>
				<link>http://kaidez.com/effective-javascript-review/</link>
				<guid isPermaLink="true">http://kaidez.com/effective-javascript-review/</guid>
			</item>
		
			<item>
				<title>TUTORIAL: Load data attributes with Mouse Clicks</title>
				<description>&lt;p&gt;A recent project at work &lt;em&gt;almost&lt;/em&gt; required my creating functionality that loaded content stored in HTML5 data attributes onto a web page with mouse clicks. At that point, I had used data attributes in practice code a bit, but readily admitted to not knowing everything about them.&lt;/p&gt;

&lt;p&gt;I did some web searches on data attributes and was shocked at the lack of good, descriptive tutorials on the subject. Although I ended up not using them in the work project, I still spent a few days hacking some related code together (all while taking note of the quirks and cross-browser issues), leading to this tutorial where I use info about my favorite footie teams as a data structure.&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#how-data%20attributes-work&quot;&gt;How data attributes work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#simple-example&quot;&gt;A simple example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#proper-naming-data%20attributes&quot;&gt;Proper naming of data attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#store-data%20attributes-link&quot;&gt;Store the data attributes in a link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#store-data%20attributes-multiple-link&quot;&gt;Store the data attributes in multiple links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#getattribute-fallback&quot;&gt;Use &quot;getAttribute()&quot; as fallback code for &quot;dataset&quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;how-data attributes-work&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;How data attributes work&lt;/h2&gt;

&lt;p&gt;Data attributes are attributes that store data in page elements:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;div id=&amp;quot;teamInfo&amp;quot;
     data-team=&amp;quot;Chelsea FC&amp;quot;
     data-manager=&amp;quot;José Mourinho&amp;quot;
     data-home-pitch=&amp;quot;Stanford Bridge&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The element that contains these data attributes (&lt;code&gt;&amp;lt;div id=&quot;teamInfo&quot;&amp;gt;&lt;/code&gt; in the above-example) has an internal property called &lt;code&gt;dataset&lt;/code&gt; that stores these attributes in an object called &lt;code&gt;DOMStringMap&lt;/code&gt; (an API introduced with HTML5):&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;console.log(teamInfo.dataset);
// logs &amp;quot;DOMStringMap {team: &amp;quot;Chelsea FC&amp;quot;, manager: &amp;quot;José Mourinho&amp;quot;, homePitch: &amp;quot;Stanford Bridge&amp;quot;}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The values in an element&#39;s &lt;code&gt;dataset&lt;/code&gt; property can be accessed individually:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;console.log(teamInfo.dataset.team); // logs &amp;quot;Chelsea FC&amp;quot;
console.log(teamInfo.dataset.manager); // logs &amp;quot;José Mourinho&amp;quot;
console.log(teamInfo.dataset.homePitch); // logs &amp;quot;Stanford Bridge&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;All of this means we use JavaScript to find these properties and display them on a web page. But &lt;a href=&quot;http://caniuse.com/#search=dataset&quot;&gt;data attribute manipulation doesn&#39;t work in all browsers, specifically, Internet Explorer 10 and lower&lt;/a&gt;, so we need to write fallback code for those situations.&lt;/p&gt;

&lt;p&gt;Before we create our final-production-ready code with fallbacks, we&#39;ll create some incremental examples to gain a better understanding of how all this works.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;simple-example&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;A simple example (&lt;a href=&quot;http://codepen.io/kaidez/pen/VYLxqG&quot; target=&quot;blank&quot;&gt;See the  demo&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;We&#39;ll start by creating code that changes just one set of data attributes with JavaScript. Let&#39;s start with the CSS, which will be applied to all future code samples and demos:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-css&#39;&gt;body {
  background: grey;
  color: #000;
  font-family: &amp;#39;Helvetica Neue&amp;#39;, Helvetica, Arial, sans-serif;
  font-weight: 900;
  font-size: 18px;
}

a:link {
  color: #fff;
  font-weight: 700;
  font-size: 22px;
}

a:visited {
  color: #fff;
}

a:hover {
  color: #fff;
  text-decoration: none;
}

.teamListItem {
  display: inline;
  list-style-type: none;
  padding-right: 20px;
}

.dataTarget {
  padding-left: 40px;
  margin: 10px 0;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The HTML for this example looks like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;TUTORIAL: Change &amp;quot;data&amp;quot; Attributes with Mouse Clicks&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot; id=&amp;quot;chelsea&amp;quot;&amp;gt;Load Chelsea FC Info »&amp;lt;/a&amp;gt;

  &amp;lt;div id=&amp;quot;teamInfo&amp;quot;
       data-team=&amp;quot;Chelsea FC&amp;quot;
       data-manager=&amp;quot;José Mourinho&amp;quot;
       data-home-pitch=&amp;quot;Stanford Bridge&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;  

  &amp;lt;div id=&amp;quot;team&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;manager&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;homePitch&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;!-- Note that we&amp;#39;re using the oldIE-friendly version of jQuery --&amp;gt;
  &amp;lt;script src=&amp;quot;http://code.jquery.com/jquery-1.11.1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And the JavaScript for this example looks like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var team = document.querySelector(&amp;quot;#team&amp;quot;),
    manager = document.querySelector(&amp;quot;#manager&amp;quot;),
    homePitch = document.querySelector(&amp;quot;#homePitch&amp;quot;);

$(&amp;quot;#chelsea&amp;quot;).click(function(event){

  event.preventDefault();

  // Use the dataset property
  team.innerHTML = teamInfo.dataset.team;
  manager.innerHTML = teamInfo.dataset.manager;
  homePitch.innerHTML = teamInfo.dataset.homePitch;

});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Breaking down the HTML first:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;a href=&amp;quot;#&amp;quot; id=&amp;quot;chelsea&amp;quot;&amp;gt;Load Chelsea FC Info »&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In the HTML, clicking on the &lt;code&gt;id=&quot;chelsea&lt;/code&gt; element will load the content stored in the data attributes.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;div id=&amp;quot;teamInfo&amp;quot;
     data-team=&amp;quot;Chelsea FC&amp;quot;
     data-manager=&amp;quot;José Mourinho&amp;quot;
     data-home-pitch=&amp;quot;Stanford Bridge&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Those attributes are listed inside &lt;code&gt;&amp;lt;div id=&quot;teamInfo&quot;&amp;gt;&lt;/code&gt; and named &lt;code&gt;data-team&lt;/code&gt;, &lt;code&gt;data-home-pitch&lt;/code&gt; and &lt;code&gt;data-manager&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;div id=&amp;quot;team&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;manager&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;homePitch&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;On mouse clicks, those attribute values will be placed inside the three &lt;code&gt;div&lt;/code&gt; tags at the bottom. Their ids are: &lt;code&gt;team&lt;/code&gt;, &lt;code&gt;manager&lt;/code&gt; and &lt;code&gt;homePitch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Breaking down the JavaScript next...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var team = document.querySelector(&amp;quot;#team&amp;quot;),
    manager = document.querySelector(&amp;quot;#manager&amp;quot;),
    homePitch = document.querySelector(&amp;quot;#homePitch&amp;quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;For those &lt;code&gt;div&lt;/code&gt; tags that we&#39;re placing the data attribute values inside of , we&#39;re using &lt;code&gt;document.querySelector()&lt;/code&gt; to store references to them. This will make them easier to find when I start referring to them in this next function...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;$(&amp;quot;#chelsea&amp;quot;).click(function(event){

  event.preventDefault();

  // Use the dataset property
  team.innerHTML = teamInfo.dataset.team;
  manager.innerHTML = teamInfo.dataset.manager;
  homePitch.innerHTML = teamInfo.dataset.homePitch;

});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;$&lt;/code&gt; tells us that we&#39;re using jQuery to bind the &lt;code&gt;jQuery.click&lt;/code&gt; method to the link on the web page which, again, is the one with an id of &lt;code&gt;#chelsea&lt;/code&gt;. It has a parameter called &lt;code&gt;event&lt;/code&gt; passed to it, which we&#39;ll discuss a little later.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;#chelsea&lt;/code&gt; is clicked, it accesses the previously-mentioned &lt;code&gt;dataset&lt;/code&gt; property of the &lt;code&gt;#teamInfo&lt;/code&gt; element and sees the value of all its data attributes.  So for example: after it&#39;s clicked, &lt;code&gt;#chelsea&lt;/code&gt; sees that &lt;code&gt;teamInfo.dataset.team&lt;/code&gt; is direct reference to the value of the &lt;code&gt;data-team&lt;/code&gt; attribute in &lt;code&gt;#teamInfo&lt;/code&gt;, and that the value is &quot;Chelsea FC&quot;.&lt;/p&gt;

&lt;p&gt;The link will then take that value and place it inside the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags that we referenced with &lt;code&gt;querySelector()&lt;/code&gt;, all with help of the &lt;code&gt;innerHTML&lt;/code&gt; property. So for example: that value of &quot;Chelsea FC&quot; will be placed inside of &lt;code&gt;&amp;lt;div id=&quot;team&quot;&amp;gt;&lt;/code&gt;, which is referenced by the previously-created &lt;code&gt;team&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;OK...back to the function&#39;s &lt;code&gt;event&lt;/code&gt; parameter...&lt;/p&gt;

&lt;p&gt;We have to do this so we can use the &lt;code&gt;event.PreventDefault()&lt;/code&gt; method in the link. If we don&#39;t use this and the link&#39;s &lt;code&gt;href&lt;/code&gt; attribute is set to &lt;code&gt;#&lt;/code&gt; (which is what&#39;s happening with &lt;code&gt;#chelsea&lt;/code&gt;), then the &lt;code&gt;#&lt;/code&gt; will be passed to the URL.&lt;/p&gt;

&lt;p&gt;Depending on the page layout, this will force the page to jump to the top. Which we don&#39;t want.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Side note: read more about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault&quot;&gt;event.PreventDefault() on MDN&lt;/a&gt;. There&#39;s also the similar &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation&quot;&gt;event.stopPropagation() on MDN&lt;/a&gt;, but that blocks events a little more obtrusively then &lt;code&gt;event.PreventDefault()&lt;/code&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;proper-naming-data attributes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Proper naming of data attributes (&lt;a href=&quot;http://codepen.io/kaidez/pen/WbvEab&quot; target=&quot;blank&quot;&gt;See the  demo&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Here&#39;s one of the quirks of data attributes...&lt;/p&gt;

&lt;p&gt;As just mentioned, &lt;code&gt;teamInfo.dataset.team&lt;/code&gt; is a direct reference to the &lt;code&gt;data-team&lt;/code&gt; attribute...that makes sense. It&#39;s also the same thing with the manager information: &lt;code&gt;teamInfo.dataset.manager&lt;/code&gt; is a direct reference to the &lt;code&gt;data-manager&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;But those are one-word attributes and our &lt;code&gt;data-home-pitch&lt;/code&gt; attribute is two words. So the syntax is different:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;homePitch.innerHTML = teamInfo.dataset.homePitch;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;It needs to be this way for two-word data attributes due to how   &lt;code&gt;dataset&lt;/code&gt; works behind the scenes. Specifically, &lt;code&gt;dataset&lt;/code&gt; will look at the data attribute names and automatically drop the data- prefix first, removing hyphens next, and finally convert the attribute to camelCase.&lt;/p&gt;

&lt;p&gt;To better understand this, look at the HTML for this section&#39;s demo and note that it has a &lt;code&gt;data-homePitch&lt;/code&gt; attribute.  Click on the &lt;em&gt;&quot;Load Chelsea FC Info »&quot;&lt;/em&gt; link and notice that the pitch content loads in as &lt;code&gt;undefined&lt;/code&gt; instead of the expected &quot;Stanford Bridge&quot;.&lt;/p&gt;

&lt;p&gt;Adjust the code so it says &lt;code&gt;data-home-pitch&lt;/code&gt; and it will work fine.  But from there, go to the JavaScript and change &lt;code&gt;teamInfo.dataset.homePitch&lt;/code&gt; to &lt;code&gt;teamInfo.dataset.home-pitch&lt;/code&gt;...you&#39;ll get a browser console reference error saying &quot;pitch is not defined&quot;.&lt;/p&gt;

&lt;p&gt;Because of this, I suggest keeping your data attributes and &lt;code&gt;dataset&lt;/code&gt; properties at a two-word minimum.  &lt;code&gt;data-home-pitch&lt;/code&gt; and &lt;code&gt;teamInfo.dataset.homePitch&lt;/code&gt; are fine...&lt;code&gt;data-home-team-pitch&lt;/code&gt; and &lt;code&gt;teamInfo.dataset.homeTeamPitch&lt;/code&gt; may work, but are too verbose.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;store-data attributes-link&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Store the data attributes in a link (&lt;a href=&quot;http://codepen.io/kaidez/pen/dPoexg&quot; target=&quot;blank&quot;&gt;See the  demo&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;The first example separated the link and the data attribute content for the sake of a clearer explanation, but a real-world use case is to store the attributes in the link being clicked on. Using the same CSS, that code would look like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The HTML&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;...
&amp;lt;a href=&amp;quot;#&amp;quot;
   id=&amp;quot;chelsea&amp;quot;
   data-team=&amp;quot;Chelsea FC&amp;quot;
   data-manager=&amp;quot;José Mourinho&amp;quot;
   data-home-pitch=&amp;quot;Stanford Bridge&amp;quot;&amp;gt;
   Load Chelsea FC Info »
&amp;lt;/a&amp;gt;

&amp;lt;div id=&amp;quot;team&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;manager&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;homePitch&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The JavaScript&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var team = document.querySelector(&amp;quot;#team&amp;quot;),
    manager = document.querySelector(&amp;quot;#manager&amp;quot;),
    homePitch = document.querySelector(&amp;quot;#homePitch&amp;quot;);

$(&amp;quot;#chelsea&amp;quot;).click(function(event){

  event.preventDefault();

  team.innerHTML = this.dataset.team;
  manager.innerHTML = this.dataset.manager;
  homePitch.innerHTML = this.dataset.homePitch;

});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In the HTML, we&#39;ve taken the data attributes listed in &lt;code&gt;&amp;lt;div id=&quot;teamInfo&quot;&amp;gt;&lt;/code&gt; and placed them inside the &lt;code&gt;#chelsea&lt;/code&gt; link. This means that &lt;code&gt;&amp;lt;div id=&quot;teamInfo&quot;&amp;gt;&lt;/code&gt; is no longer needed so we can get rid of it.&lt;/p&gt;

&lt;p&gt;In the JavaScript, we&#39;ve replaced all the &lt;code&gt;teamInfo.dataset&lt;/code&gt; references to &lt;code&gt;this.dataset&lt;/code&gt;. &lt;code&gt;this&lt;/code&gt; is a direct reference to the &lt;code&gt;#chelsea&lt;/code&gt; link context, meaning it sees everything connected to it...including the data attributes.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;store-data attributes-multiple-link&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Store the data attributes in multiple links (&lt;a href=&quot;http://codepen.io/kaidez/pen/GgJYLZ&quot; target=&quot;blank&quot;&gt;See the  demo&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;In the previous example, we could have used &lt;code&gt;chelsea.dataset&lt;/code&gt; instead of &lt;code&gt;this.dataset&lt;/code&gt;. But by using &lt;code&gt;this&lt;/code&gt;, our code is reusable and lets us create multiple links that use the same functionality.&lt;/p&gt;

&lt;p&gt;Still keeping the CSS the same, we can add a few more links to our HTML while slightly adjusting our JavaScript.  Clicking on each link will load different info onto our page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The HTML&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;...
&amp;lt;ul&amp;gt;
  &amp;lt;li class=&amp;quot;teamListItem&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot;
       class=&amp;quot;teamLink&amp;quot;
       data-team=&amp;quot;Chelsea FC&amp;quot;
       data-manager=&amp;quot;José Mourinho&amp;quot;
       data-home-pitch=&amp;quot;Stanford Bridge&amp;quot;&amp;gt;
       Load Chelsea FC Info »
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;teamListItem&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot;
      class=&amp;quot;teamLink&amp;quot;
      data-team=&amp;quot;Real Madrid&amp;quot;
      data-manager=&amp;quot;Carlo Ancelotti&amp;quot;
      data-home-pitch=&amp;quot;Santiago Bernabéu&amp;quot;&amp;gt;
      Load Real Madrid Info »
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;teamListItem&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot;
       class=&amp;quot;teamLink&amp;quot;
      data-team=&amp;quot;AC Milan&amp;quot;
      data-manager=&amp;quot;Filippo Inzaghi&amp;quot;
      data-home-pitch=&amp;quot;San Siro&amp;quot;&amp;gt;
      Load AC Milan Info »
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;teamListItem&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot;
      class=&amp;quot;teamLink&amp;quot;
      data-team=&amp;quot;Paris Saint-Germain&amp;quot;
      data-manager=&amp;quot;Laurent Blanc&amp;quot;
      data-home-pitch=&amp;quot;Parc des Princes&amp;quot;&amp;gt;
      Load Paris Saint-Germain Info »
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;div id=&amp;quot;team&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;manager&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;homePitch&amp;quot; class=&amp;quot;dataTarget&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The JavaScript&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var team = document.querySelector(&amp;quot;#team&amp;quot;),
    manager = document.querySelector(&amp;quot;#manager&amp;quot;),
    homePitch = document.querySelector(&amp;quot;#homePitch&amp;quot;);

 $(&amp;quot;.teamLink&amp;quot;).click(function(event){

  event.preventDefault();

  team.innerHTML = this.dataset.team;
  manager.innerHTML = this.dataset.manager;
  homePitch.innerHTML = this.dataset.homePitch;

});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In the HTML we&#39;ve removed the id property while adding a class called &lt;code&gt;teamLink&lt;/code&gt; for each of our links.  We&#39;re also no longer targeting the id in the &lt;code&gt;jQuery.click&lt;/code&gt; method and, instead, targeting this new &lt;code&gt;teamLink&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;So every time a link with the &lt;code&gt;teamLink&lt;/code&gt; class gets clicked, the &lt;code&gt;this&lt;/code&gt; keyword forces our JavaScript code to look at the data attributes for that link only, then load them onto the page.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;getattribute-fallback&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Use &lt;code&gt;getAttribute()&lt;/code&gt; as fallback code for &lt;code&gt;dataset&lt;/code&gt; (&lt;a href=&quot;http://codepen.io/kaidez/pen/QwbJBZ&quot; target=&quot;blank&quot;&gt;See the  demo&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;dateset&lt;/code&gt; is awesome but, as mentioned in the beginning, isn&#39;t cross-browser compliant and doesn&#39;t work in all browsers. We can write fallback code with the &lt;code&gt;getAttribute()&lt;/code&gt; method for those browsers, specifically IE 10 and lower.&lt;/p&gt;

&lt;p&gt;The CSS and HTML stay the same while the JavaScript goes through some changes...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var team = document.querySelector(&amp;quot;#team&amp;quot;),
    manager = document.querySelector(&amp;quot;#manager&amp;quot;),
    homePitch = document.querySelector(&amp;quot;#homePitch&amp;quot;),
    teamValue,
    managerValue,
    homePitchValue;

$(&amp;quot;.teamLink&amp;quot;).click(function(event){
  event.preventDefault();

  // if &amp;quot;this.dataset&amp;quot; does NOT exist, do this
  if(!this.dataset) {
    teamValue = this.getAttribute(&amp;quot;data-team&amp;quot;);
    managerValue = this.getAttribute(&amp;quot;data-manager&amp;quot;);
    homePitchValue = this.getAttribute(&amp;quot;data-home-pitch&amp;quot;);

  // if but if it does, do this
  } else {
    teamValue = this.dataset.team;
    managerValue = this.dataset.manager;
    homePitchValue = this.dataset.homePitch;
  };

  team.innerHTML = teamValue;
  manager.innerHTML = managerValue;
  homePitch.innerHTML = homePitchValue;

});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We&#39;ve add three new variables without giving them a value: &lt;code&gt;teamValue&lt;/code&gt;, &lt;code&gt;managerValue&lt;/code&gt; and &lt;code&gt;homePitchValue.&lt;/code&gt; From there, we make sure that every time a link is clicked, it first checks to see if our links have a &lt;code&gt;dataset&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;We do this using a JavaScript &lt;code&gt;if/else&lt;/code&gt; statement and first check to see  &lt;code&gt;dataset&lt;/code&gt; does NOT exist by saying &lt;code&gt;if(!this.dataset)&lt;/code&gt;. If it doesn&#39;t exist, we&#39;ll use the &lt;code&gt;getAttribute()&lt;/code&gt; method to find all the data attribute values and store them in the three new variables we just created.&lt;/p&gt;

&lt;p&gt;But if the &lt;code&gt;dataset&lt;/code&gt; property DOES exist, we&#39;ll just say that those new variables should use &lt;code&gt;dataset&lt;/code&gt; to access and store those values like we&#39;ve been doing up to this point.&lt;/p&gt;

&lt;p&gt;We&#39;ve made sure that the &lt;code&gt;teamValue&lt;/code&gt;, &lt;code&gt;managerValue&lt;/code&gt; and &lt;code&gt;homePitchValue&lt;/code&gt; variables are properly storing the data attributes values, regardless of whether or not the browser supports &lt;code&gt;dataset&lt;/code&gt;. So in order to get those values on the page, we just need to tell our code to look at those variable values and place them inside the elements we pre-defined awhile ago with &lt;code&gt;document.querySelector()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was a very basic data attribute implementation and, quite frankly, data attribute implementations should be simple. Each link isn&#39;t overloaded with data attributes that have over 100 character lines of copy.&lt;/p&gt;

&lt;p&gt;Were that my data structure or something even more complicated, I would use a pure JS implementation and ignore data attributes. That was my opinion at the start of this but reading well-respected developer &lt;a href=&quot;https://dev.opera.com/articles/introduction-to-datasets/&quot;&gt;Divya Manian&#39;s excellent &lt;code&gt;dataset&lt;/code&gt; post&lt;/a&gt; justifies my feelings.&lt;/p&gt;

&lt;p&gt;But for simple data structures, using data attributes will certainly fit your simpler use cases, especially if you need to load them with a mouse event. So there are many reasons to add them to your production code, and I hope this tutorial helps you.&lt;/p&gt;
</description>
				<pubDate>Mon, 01 Dec 2014 00:00:00 -0500</pubDate>
				<link>http://kaidez.com/load-data-attributes-mouseclicks/</link>
				<guid isPermaLink="true">http://kaidez.com/load-data-attributes-mouseclicks/</guid>
			</item>
		
			<item>
				<title>New Site I Worked On: RevlonProBrands.com</title>
				<description>&lt;p&gt;Revlon, my employer, recently launched &lt;a href=&quot;http://www.revlonprobrands.com/us&quot; title=&quot;visit RevlonProBrands.com&quot;&gt;RevlonProBrands.com&lt;/a&gt;, a one-page site that  acts as a sales tool for the company&#39;s sales reps. It was designed by a Colorado web shop and passed on to Revlon&#39;s internal web team for integration into a &lt;a href=&quot;http://www.sitecore.net/&quot; title=&quot;visit Sitecore: a .NET based content management system&quot;&gt;Sitecore&lt;/a&gt; environment.&lt;/p&gt;

&lt;p&gt;There wasn&#39;t a need for lots complicated client-side code, but working on this project gave me the chance to use certain web development tools and code techniques. Let&#39;s discuss them:&lt;/p&gt;

&lt;h2 class=&quot;tableOfContentsHeader&quot;&gt;Table of Contents&lt;/h2&gt;


&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#atom&quot;&gt;GitHub Atom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jade&quot;&gt;Jade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#oocss&quot;&gt;OOCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#modernizr-yepnope&quot;&gt;Modernizr &amp;amp; yepnope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#grunt-gulp&quot;&gt;Grunt &amp;amp; Gulp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;atom&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;GitHub Atom&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot; title=&quot;visit Sublime Text&quot;&gt;Sublime Text&lt;/a&gt; was my primary development environment for this project, but there were a few instances when I switched to &lt;a href=&quot;https://atom.io/&quot; title=&quot;visit Atom&quot;&gt;Atom&lt;/a&gt;. Which is a web editor that &lt;a href=&quot;https://github.com/&quot; title=&quot;visit GitHub&quot;&gt;GitHub&lt;/a&gt; released to beta a few months ago from this blog post.&lt;/p&gt;

&lt;p&gt;Atom definitely &quot;takes inspiration&quot; from Sublime Text in terms custom configuration...many features that needed to be installed in Sublime as third-party packages are native in Atom.&lt;/p&gt;

&lt;p&gt;This includes Git and GitHub integration, which is obvious when you consider Atom&#39;s creator. If your project is already Git-configured (i.e., if you&#39;ve already done a full &lt;code&gt;git init&lt;/code&gt; inside of it and it&#39;s been pushed up to GitHub at least once), the configs can communicate with Atom and perform lots of Git-related tasks.&lt;/p&gt;

&lt;p&gt;Here are a few of the tasks...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Atom can read a project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file  and tell you which files are ignored by greying them out in your project tree.
&lt;figure class=&quot;postFigure&quot;&gt;
&lt;img src=&quot;/img/atom_01.jpg&quot; class=&quot;imgBorder&quot; alt=&quot;Screenshot of how gitignore works with Atom&quot;&gt;
&lt;figcaption class=&quot;postFigureCaption&quot;&gt;Greyed-out files are in .gitignore&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;Atom tells you what branch you&#39;re currently working on.
&lt;figure class=&quot;postFigure&quot;&gt;
&lt;img src=&quot;/img/atom_02.jpg&quot; class=&quot;imgBorder&quot; alt=&quot;Screenshot of how Atom tracks your current Git branch&quot;&gt;
&lt;figcaption class=&quot;postFigureCaption&quot;&gt;Current Git branch appears in the bottom-left corner of your editor&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;Atom uses color-coding to indicate that files need to be commited to your git repo.
&lt;figure class=&quot;postFigure&quot;&gt;
&lt;img src=&quot;/img/atom_03.jpg&quot; class=&quot;imgBorder&quot; alt=&quot;Screenshot of how Atom tracks your current Git branch&quot;&gt;
&lt;figcaption class=&quot;postFigureCaption&quot;&gt;Orange indicates that an already-existing file has been updated while green indicates that a new file has been added to the project, but hasn&#39;t been committed yet&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is not to say that Sublime can&#39;t do any of these things, because it can.  It&#39;s just that these features come pre-installed into Atom: as packages but pre-installed nonetheless.&lt;/p&gt;

&lt;p&gt;That these features are installed as packages is key to Atom&#39;s design. Atom adopts a modularized architecture as a result, making it easy to configure and adjust the architecture if needed.&lt;/p&gt;

&lt;p&gt;This highly configurable setup is mostly thanks to Atom&#39;s deep Node integration. Peek at most of Atom&#39;s pre-installed plugins and you&#39;ll see a basic Node architectural pattern...if you&#39;re a regular Node hacker then adding Atom to your toolkit is close to a no-brainer.&lt;/p&gt;

&lt;p&gt;Managing settings in Atom is done using a nice user interface, something that Atom has over Sublime Text (at least I think so). Adding themes, installing/removing packages and creating custom settings is a breeze in Atom.&lt;/p&gt;

&lt;p&gt;Again, Atom is in beta at the time of this post but it a version 1.o release is looming.  GitHub once said that there would be both free and paid versions of the editor, but it appears that it&#39;s now &lt;em&gt;100% free!!!&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I&#39;m not yet ready to leave Sublime Text for Atom...I&#39;ve gotten extremely comfortable with Sublime Text over the years and have it setup just how I want it. Keystrokes are memorized, bash scripts are synced up, themes are picked, etc.&lt;/p&gt;

&lt;p&gt;But this may change.  Will probably go full-on Atom for next project and put to the test.
&lt;a name=&quot;jade&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Jade&lt;/h3&gt;

&lt;p&gt;RevlonProBrands.com is a &lt;em&gt;responsive/adaptive/insert-another-buzzword-here&lt;/em&gt; website, but Sitecore is using server-side code to load in two versions of the page: one for desktops and another for everything else. So it made sense to use some sort of development-level templating system that would apply the common parts to each page.&lt;/p&gt;

&lt;p&gt;I chose &lt;a href=&quot;http://jade-lang.com/&quot; title=&quot;visit the Jade templating&quot;&gt;Jade&lt;/a&gt; for this, a very simple templating engine that compile pages into HTML. In terms of what code you have to write to get things done, Jade is similar to things like &lt;a href=&quot;http://lesscss.org/&quot; title=&quot;visit LESS, a JavaScript-based CSS processor&quot;&gt;LESS&lt;/a&gt; and &lt;a href=&quot;http://haml.info/&quot; title=&quot;visit Haml, an HTML abstraction markup language&quot;&gt;Haml&lt;/a&gt; in the sense that indentation defines block structure.&lt;/p&gt;

&lt;p&gt;So you &lt;a href=&quot;https://www.npmjs.org/package/jade&quot; title=&quot;install Jade with npm&quot;&gt;use npm to install Jade&lt;/a&gt; on your machine. Then create &lt;code&gt;.jade&lt;/code&gt; files like this...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;doctype html
html
  head
    title kaidez.com
  body
    h1 My Page Header&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And with a few keystrokes, this file will output an &lt;code&gt;.html&lt;/code&gt; file like this&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;kaidez.com&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;My Page Header&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;My Content&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;I went with Jade because I&#39;ve been playing with the &lt;a href=&quot;http://mean.io/&quot; title=&quot;review the MEAN stack&quot;&gt;MEAN stack&lt;/a&gt; lately and &lt;a href=&quot;http://expressjs.com/&quot; title=&quot;visit Express, the Node-based web server framework&quot;&gt;Express&lt;/a&gt; (the &quot;E&quot; in MEAN) likes to use Jade. So I figured it made sense for me to figure out.&lt;/p&gt;

&lt;p&gt;Jade has &quot;includes&quot; functionality similar to PHP includes and .NET user controls. In other words, small parts of page code can be broken out into their own files and then embedded into other pages for output.&lt;/p&gt;

&lt;p&gt;So in other words, these two &lt;code&gt;.jade&lt;/code&gt; files...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;//index.jade
doctype html
html
  include includes/header //this is an include file
  body
    h1 My Page Header
    p My Content&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;//includes/header.jade
head
  title kaidez.com&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;...&lt;em&gt;SHOULD&lt;/em&gt; output a single &lt;code&gt;.html&lt;/code&gt; file like this...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;kaidez.com&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;My Page Header&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;My Content&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The indentation didn&#39;t QUITE work out the way I wanted to when I used a &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; tag...not sure why that was after a doing a web search for an answer. I think I can figure out why this is later on down the line, or maybe just asking for an answer on Stack Overflow will work as well.&lt;/p&gt;

&lt;p&gt;That being said, I was approaching the delivery date for submitting the finalized code to the lead engineer, so I couldn&#39;t spend a whole lot of time on this problem. I&#39;ll will try to fix the issue but if it persists and I have to do a similar project in the future, I may just use &lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;visit Jekyll&quot;&gt;Jekyll&lt;/a&gt;, which has an incredibly straightforward templating system.
&lt;a name=&quot;oocss&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;OOCSS&lt;/h3&gt;

&lt;p&gt;As mentioned in my &lt;a href=&quot;http://kaidez.com/site-redesign-2013/&quot; title=&quot;read &#39;kaidez.com 2013 Site Redesign&#39; on kaidez.com&quot;&gt;2013 site redesign post&lt;/a&gt;, I really wanted to use object-oriented CSS, or OOCSS, in a project. I chose this project to do so and I am happy with what I accomplished and what learned in the process.&lt;/p&gt;

&lt;p&gt;There&#39;s not enough room in this blog post to go through all its characteristics. But, simply put, OOCSS is a CSS design pattern that implements what its name implies: an object-oriented method for writing CSS using some common best practices.&lt;/p&gt;

&lt;p&gt;OOCSS is a beautifully crafted set of ideas by &lt;a href=&quot;https://twitter.com/stubbornella/&quot; title=&quot;stubbornella at Twitter&quot;&gt;Nicole Sullivan&lt;/a&gt;. The central ideas include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;placing styles under CSS classes and not IDs, reserving IDs for JavaScript hooks.&lt;/li&gt;
&lt;li&gt;separating these classes into two formats...one for style and one for structure.&lt;/li&gt;
&lt;li&gt;in true object-oriented style, reusing these classes across your page elements as needed.&lt;/li&gt;
&lt;li&gt;avoid inefficient CSS selectors, such as descendant selectors.&lt;/li&gt;
&lt;li&gt;always &lt;a href=&quot;http://csslint.net/&quot; title=&quot;lint you CSS with CSS Lint&quot;&gt;linting your CSS&lt;/a&gt; to test for bugs and confirm that CSS best practices are being followed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I applied these ideas to my Pro Brands page code, specifically the individual product image module. Each module contains lots and lots of shared CSS classes among the various page elements it contains.  Some of the module elements contain IDs; however, none of these elements have CSS styles applied on the ID level.&lt;/p&gt;

&lt;p&gt;OOCSS definitely takes some getting used to and takes more work.  Quite a few people have personally told me they disagree with it as a practice and don&#39;t use it.  But I have noticed that the CSS parses faster than if I hadn&#39;t used it so I&#39;m not going to give up on it.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;modernizr-yepnope&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Modernizr &amp;amp; yepnope&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;(Author&#39;s note: Yepnope has sorta/kinda been deprecated (&lt;a href=&quot;https://github.com/SlexAxton/yepnope.js#deprecation-notice&quot;&gt;read more about this&lt;/a&gt;) so this part of the post is here for historical purposes.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sitecore loads one version of the site for desktops and a (slightly) different version of the site handheldz.&lt;/p&gt;

&lt;p&gt;Each product image reacts to a jQuery-powered &lt;code&gt;mouseover&lt;/code&gt; on desktops and a jQuery-powered &lt;code&gt;click&lt;/code&gt; on handhelds. The image reaction is, when one of those events happens, a window scrolls up over it displaying some product info using &lt;code&gt;jQuery.animate()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The group of images is placed in a JS array where a &lt;code&gt;forEach&lt;/code&gt; method loops over it, but &lt;code&gt;forEach&lt;/code&gt; isn&#39;t supported in legacy Internet Explorer. That meant building a feature-detect for &lt;code&gt;forEach&lt;/code&gt; and, if the site loaded into a browser that didn&#39;t support that, loading in a polyfill that would apply &lt;code&gt;forEach&lt;/code&gt; support in such browsers.&lt;/p&gt;

&lt;p&gt;This whole process was managed by &lt;a href=&quot;http://modernizr.com&quot; title=&quot;Read more about Modernizr&quot;&gt;Modernizr&lt;/a&gt; and its &lt;a href=&quot;http://modernizr.com/docs/#load&quot; title=&quot;Read more about Modernizr.load()&quot;&gt;Modernizr.load() method&lt;/a&gt;.  And it&#39;s a pretty straightforward process when keeping a few things in mind...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Polyfill&quot; title=&quot;Get the &#39;forEach&#39; polyfill code at Mozilla Developer Network&quot;&gt;MDN provides a great piece of polyfill code&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;...I copied it into a file called &lt;code&gt;forEachPolyfill.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remember that a full Modernizr build performs features detects for many things by default, but not everything.&lt;/li&gt;
&lt;li&gt;Remember that you can &lt;a href=&quot;http://modernizr.com/download/&quot; title=&quot;Create a custom Modernizr build&quot;&gt;create a custom Modernizr build&lt;/a&gt; with only the features-detects you want, and can also create your own custom features-detects for the things that Modernizr doesn&#39;t look for by default...this is done with Modernizr&#39;s sorely under-used &lt;code&gt;addTest()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Note that Modernizr provides a well-stocked list of &lt;a href=&quot;https://github.com/Modernizr/Modernizr/tree/master/feature-detects&quot; title=&quot;See some Modernizr pre-written feature detects&quot;&gt;pre-written feature-detects in its GitHub repo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;small&gt;&lt;em&gt;&lt;sup&gt;1&lt;/sup&gt; the polyfill code has been updated since I first used it, but all works well for both versions.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;But most importantly, remember that Modernizr has a &lt;code&gt;Modernizr.load()&lt;/code&gt; method that&#39;s based on yepnope.js
I applied a custom feature-detect based on one of these pre-written pieces of code: &lt;a href=&quot;https://github.com/Modernizr/Modernizr/blob/master/feature-detects/es5/array.js&quot; title=&quot;See Modernizer&#39;s ES5 feature-detect polyfill&quot;&gt;the ECMAScript 5.1 array feature-detects&lt;/a&gt;. I then placed the code in a file called &lt;code&gt;forEachTest.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are two versions of &lt;code&gt;app.js&lt;/code&gt;: one for desktops and one for mobiles &amp;amp; handhelds. Sitecore uses device detection to decide which one to load.&lt;/p&gt;

&lt;p&gt;The .js files look like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;forEachTest.js&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;/*
 * Make Modernizr test for &amp;quot;Array.prototype.forEach&amp;quot; so it can work
 * cross-browser when building out the single product modules. When
 * the test passes, &amp;quot;Modernizr.foreach&amp;quot; is attached to the list of
 * Modernizr classes in the &amp;lt;html&amp;gt; tag.
 */
Modernizr.addTest(&amp;quot;foreach&amp;quot;, function(){
  var forEachFunc = Array.prototype.forEach;
  return typeof forEachFunc === &amp;quot;function&amp;quot;
});

Modernizr.load({
  test: Modernizr.foreach,
  yep: &amp;quot;js/app.js&amp;quot;,
  nope: [&amp;quot;forEachPolyfill.js&amp;quot;, &amp;quot;app.js&amp;quot;]
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;app.js (Mobile/Handheld Version)&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;function ScrollContent() {}

/*
 * &amp;quot;buildScrolls&amp;quot; method: runs faster if it&amp;#39;s attached to core
 * function&amp;#39;s prototype and not inside core function.
 */
ScrollContent.prototype.buildScrolls = function(element) {

  /*
   * scroll up code/down for mobile/handhelds using &amp;quot;jQuery.click()&amp;quot;
   * below since this is the mobile/handheld version. In the desktop
   * version, &amp;quot;jQuery.click()&amp;quot; is replaced by &amp;quot;jQuery.mouseover()&amp;quot;.
   */

   // scroll up
  $(&amp;quot;#&amp;quot; + element + &amp;quot;Id&amp;quot;).click(function() {
    $(&amp;quot;#&amp;quot; + element + &amp;quot;Content&amp;quot;).animate({
      top: &amp;quot;-=434px&amp;quot;
    }, &amp;quot;fast&amp;quot;);
  });

  // scroll down
  $(&amp;quot;#&amp;quot; + element + &amp;quot;Content&amp;quot;).click(function() {
    $(this).animate({
      top: &amp;quot;+=434px&amp;quot;
    }, &amp;quot;fast&amp;quot;);
  });

};

var products = new ScrollContent();
[&amp;quot;productOne&amp;quot;,&amp;quot;productTwo&amp;quot;,&amp;quot;productThree&amp;quot;,&amp;quot;productFour&amp;quot;,&amp;quot;productFive&amp;quot;,&amp;quot;productSix&amp;quot;,&amp;quot;productSeven&amp;quot;].forEach(products.buildScrolls);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And the HTML code for each scroll looks somewhat like this...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;div id=&amp;quot;productOneId&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;productOneContent&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;productTwoId&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;productTwoContent&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;productThreeId&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;productThreeContent&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;productFourId&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;productFourContent&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;productFiveId&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;productFiveContent&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;productSixId&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;productSixContent&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;productSevenId&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;productSevenContent&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The divs that end in &quot;Id&quot; are buttons that run one of the mouse events while the divs that end in &quot;Content&quot; contain the  product images that appear on the mouse events.&lt;/p&gt;

&lt;p&gt;So on page-load, everything works as follows...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inside &lt;code&gt;forEachTest.js&lt;/code&gt;, Modernizr tests for the existence of &lt;code&gt;forEach&lt;/code&gt; in the browser.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;forEach&lt;/code&gt; exists, the &quot;yep&quot; part of the code runs and loads &lt;code&gt;app.js&lt;/code&gt; into the browser.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;forEach&lt;/code&gt; does NOT exist, the &quot;nope&quot; part of the code runs and adds both the polyfill code and &lt;code&gt;app.js&lt;/code&gt; into the browser.&lt;/li&gt;
&lt;li&gt;When one of the divs ending in id receives one of the mouse events, the &lt;code&gt;ScrollContent.buildScrolls()&lt;/code&gt; method in &lt;code&gt;app.js&lt;/code&gt; runs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScrollContent.buildScrolls()&lt;/code&gt; takes an array of text strings, and each array item in the array is  passed as the &lt;code&gt;element&lt;/code&gt; parameter in &lt;code&gt;buildScrolls()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The parameters are text strings that get passed to the &lt;code&gt;element&lt;/code&gt; reference in the jQuery event calls. So for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the value of &lt;code&gt;element&lt;/code&gt; in the forEach loop is &quot;productOne&quot;.&lt;/li&gt;
&lt;li&gt;two text strings are built as a result: &quot;#productOneId&quot; and &quot;#productOneContent&quot;.&lt;/li&gt;
&lt;li&gt;both text strings match the name of the div in the HTML code, synchronizing with the jQuery event calls&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;grunt-gulp&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Grunt &amp;amp; Gulp&lt;/h3&gt;

&lt;p&gt;I can&#39;t see task tools like &lt;a href=&quot;http://gruntjs.com&quot; title=&quot;Learn more about the Grunt task runner&quot;&gt;Grunt&lt;/a&gt; being omitted from my workflow and as discussed in my last site redesign post, &lt;a href=&quot;/site-redesign-2013/#grunt-deployment-workflow&quot; title=&quot;Read about kaidez.com&#39;s 2013 site redesign&quot;&gt;Grunt ruled my workflow&lt;/a&gt;. But &lt;a href=&quot;http://gulpjs.com/,&quot; title=&quot;Learn more about Gulp&quot;&gt;Gulp&lt;/a&gt; has emerged as formidable challenger to Grunt.&lt;/p&gt;

&lt;p&gt;Grunt and Gulp are Node-based task runners that run from the command line. Both let you build custom tasks but there are tons of plugins available for each that let you run pre-built tasks. There are probably more similarities but these are the two that stick out to me the most.&lt;/p&gt;

&lt;p&gt;The BIG difference is how Gulp works behind the scenes...Gulp uses Node&#39;s streaming system to build and synchronize its tasks. Gulp creator Eric Schoffstall has said that you need to be a programmer to understand Gulp, but I think that the streaming system makes parts of it easier. Gulp streams allow for the easy chaining of tasks as well as requiring less configuration, and I like that.&lt;/p&gt;

&lt;p&gt;I used Gulp and Grunt while coding the Pro Brands site because for all of Gulp&#39;s advantage, there are more plug-ins available for Grunt. So in order to get certain tasks done within a short development timeline, I used Grunt to fill in the spots where a Gulp plugin wasn&#39;t available.&lt;/p&gt;

&lt;p&gt;The fact that there are less Gulp plugins that Grunt ones ties into Gulp&#39;s philosophy. Eric Schoffstall outlined this philosophy quite well on the &lt;a href=&quot;http://javascriptjabber.com/097-jsj-gulp-js-with-eric-schoffstall/&quot; title=&quot;Listen to Eric Schoffstall on JavaScript Jabber&quot;&gt;JavaScript Jabber Podcast&lt;/a&gt;...give it a listen.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;There weren&#39;t REALLY a lot of code challenges for me in this project...a simple one-pager like this doesn&#39;t bring any. But I pushed myself with code a little and played with some new tools. I accomplished what I wanted to and as a developer, that&#39;s enough.&lt;/p&gt;
</description>
				<pubDate>Fri, 12 Sep 2014 00:00:00 -0400</pubDate>
				<link>http://kaidez.com/revlon-pro-brands/</link>
				<guid isPermaLink="true">http://kaidez.com/revlon-pro-brands/</guid>
			</item>
		
			<item>
				<title>Web Components Demo: Templates and (some) Shadow DOM</title>
				<description>&lt;p class=&quot;clearfix&quot;&gt;
  &lt;ul&gt;
  &lt;li style=&quot;display: inline-block; margin: 10px;&quot;&gt;&lt;a href=&quot;/samples/template-shadowdom-practice/&quot; class=&quot;demoLink&quot; target=&quot;blank&quot;&gt;VIEW THE DEMO&lt;/a&gt;&lt;/li&gt;
  &lt;li style=&quot;display: inline-block; margin: 10px;&quot;&gt;&lt;a href=&quot;https://github.com/kaidez/template-shadowdom-practice&quot; class=&quot;demoLink&quot;&gt;GRAB THE CODE ON GITHUB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;


&lt;p&gt;&lt;em&gt;Author&#39;s Note: it&#39;s best to review this code in Google Chrome 36+. Also, open up the Dev Tools and under &quot;General&quot; and then &quot;Settings,&quot; make sure that the &quot;Show user agent shadow DOM&quot; box is checked.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I spent some time hacking Web Components during a long flight layover and it was time well spent. I put together a small demo, just so I could better understand Web Components as a whole.&lt;/p&gt;

&lt;p&gt;Web Components is a concept composed of four sub-concepts, but I just focused on two of them for the demo: &lt;em&gt;templates&lt;/em&gt; and &lt;em&gt;Shadow DOM&lt;/em&gt;...primarily templates. At the time of this post, implementing Web Components neatly across the different browsers and devices requires a polyfill library like &lt;a href=&quot;http://www.polymer-project.org/&quot; title=&quot;visit the Polymer Web Components Library&quot;&gt;Polymer&lt;/a&gt; or &lt;a href=&quot;http://x-tags.org/&quot; title=&quot;visit the X-tag Web Components Library&quot;&gt;X-Tag&lt;/a&gt;, but I wanted to study the internal workings of each sub-concept before diving into the polyfills.&lt;/p&gt;

&lt;h3&gt;A quick Web Components description&lt;/h3&gt;

&lt;p&gt;Web Components are a set of emerging technologies working their way towards a firm specification, thanks to the hard work of the W3C. The goal of Web Components is to allow developers to create custom elements with HTML, CSS and JavaScript...these elements can also be thought of as widgets.&lt;/p&gt;

&lt;p&gt;An great example of this is the &lt;code&gt;&amp;lt;github-card&amp;gt;&lt;/code&gt; custom element. If you have a GitHub account, &lt;a href=&quot;http://pazguille.github.io/github-card/&quot; title=&quot;go to &amp;lt;github-card&amp;gt; demo page&quot;&gt;check out the &amp;lt;github-card&gt; demo page&lt;/a&gt;, add your GH username in the field to review the end result, then &lt;a href=&quot;https://github.com/pazguille/github-card&quot; title=&quot;go to &amp;lt;github-card&amp;gt; GitHub documentation&quot;&gt;go to the &amp;lt;github-card&gt; documentation&lt;/a&gt; to download the code and see how to apply it to your page using a simple tag.&lt;/p&gt;

&lt;p&gt;The four sub-concepts that make up Web Components are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Templates&lt;/strong&gt;&lt;/em&gt;: a chunk of formatted HTML that can be cloned, inserted and rendered based on instructions you give it. &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/template/&quot; title=&quot;Read more about Web Component templates&quot;&gt;Read more &amp;raquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Shadow DOM&lt;/strong&gt;&lt;/em&gt;: an encapsulated separate DOM that you can add code to. It&#39;s best to think of it as &quot;a DOM within your DOM.&quot; &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/&quot; title=&quot;Read more about Web Component Shadow DOM&quot;&gt;Read more &amp;raquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Custom Elements&lt;/strong&gt;&lt;/em&gt;: the ability to create custom page tags, such as &lt;code&gt;&amp;lt;github-card&amp;gt;&lt;/code&gt;. &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/customelements/&quot;&gt;Read more &amp;raquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;HTML Imports&lt;/strong&gt;&lt;/em&gt;: the ability to load in small pieces of HTML code into your page when needed via &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags. &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/imports/&quot; title=&quot;Read more about Web Component HTML Imports&quot;&gt;Read more&amp;raquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt; &lt;em&gt;(all the above &quot;Read more &amp;raquo;&quot; links courtesy of &lt;a href=&quot;http://www.html5rocks.com/&quot; title=&quot;Go to HTML5 Rocks&quot;&gt;HTML5 Rocks&lt;/a&gt;):&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While things like &amp;lt;github-card&gt; utilize all the sub-concepts, each one can function on its own quite nicely. But when they all work together, they form Web Components...conceptually, it&#39;s best to think of WC in the same way as AJAX, where a group of technologies work together to perform a single task.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Side note: there&#39;s another sub-concept called &quot;decorators&quot; but lots of developers don&#39;t like it, so there&#39;s not a lot of focus in terms of finalizing its specification. It may disappear.)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Started out by focusing on templates...mostly&lt;/h3&gt;

&lt;p&gt;I&#39;ve read about all of these sub-concepts (including decorators) but  played with the actual code just a little, and the best way to learn is by doing instead of reading. So I&#39;m in the middle of hacking out code for each sub-concept, starting with templates.&lt;/p&gt;

&lt;p&gt;For the templates, I wanted to display a simple list of books based on a small JavaScript data object. Things started out like this...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;JavaScript Books&amp;lt;/title&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/normalize.min.css&amp;quot;&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/bootstrap.min.css&amp;quot;&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/styles.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;h1 class=&amp;quot;page-header&amp;quot;&amp;gt;JavaScript Books&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;Built with templates &amp;amp; Shadow DOM&amp;lt;/h1&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;template id=&amp;quot;singleBook&amp;quot;&amp;gt;
      &amp;lt;style&amp;gt;
        .templateArticle {
          display: inline-block;
          margin: 6px;
        }
        .btn {
          margin: 10px;
          float: right;
        }
        .thumbnail {
          margin-bottom: 0;
        }
        .bookTitleClass {
          text-align: left;
        }
        #bookTitle {
          font-style: italic;
        }
      &amp;lt;/style&amp;gt;
      &amp;lt;article class=&amp;quot;templateArticle panel panel-default&amp;quot;&amp;gt;
        &amp;lt;header class=&amp;quot;panel-heading&amp;quot;&amp;gt;
          &amp;lt;h2 class=&amp;quot;panel-title bookTitleClass&amp;quot;&amp;gt;
            &amp;lt;span id=&amp;quot;bookTitle&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
            &amp;lt;br /&amp;gt;
            by &amp;lt;span id=&amp;quot;bookAuthor&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
          &amp;lt;/h2&amp;gt;
        &amp;lt;/header&amp;gt;
        &amp;lt;img src=&amp;quot;&amp;quot; alt=&amp;quot;&amp;quot; class=&amp;quot;thumbnail&amp;quot;&amp;gt;
        &amp;lt;a href=&amp;quot;&amp;quot; id=&amp;quot;btnPurchase&amp;quot; class=&amp;quot;btn btn-primary&amp;quot; role=&amp;quot;button&amp;quot; target=&amp;quot;blank&amp;quot;&amp;gt;Buy at Amazon&amp;lt;/a&amp;gt;
      &amp;lt;/article&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;section id=&amp;quot;allBooks&amp;quot; class=&amp;quot;allBooksClass&amp;quot;&amp;gt;&amp;lt;/section&amp;gt;
    &amp;lt;script src=&amp;quot;scripts/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;css/styles.css&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-css&#39;&gt;body {
  margin: 20px;
}
h1, h2 {
  text-align: center;
}
footer {
  text-align: center;
  margin-top: 20px;
}
.allBooksClass {
  margin-top: 30px;
  text-align: center;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;scripts/main.js&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;(function(){

  var jsBooks = {
    &amp;quot;book1&amp;quot; : {
      &amp;quot;title&amp;quot;: &amp;quot;Object-Oriented Javascript&amp;quot;,
      &amp;quot;author&amp;quot;: &amp;quot;Stoyan Stefanov&amp;quot;,
      &amp;quot;image&amp;quot;: &amp;quot;images/ooj.jpg&amp;quot;,
      &amp;quot;amazonLink&amp;quot;: &amp;quot;http://amzn.to/1sRFbEC&amp;quot;
    },
    &amp;quot;book2&amp;quot; : {
      &amp;quot;title&amp;quot;: &amp;quot;Effective Javascript&amp;quot;,
      &amp;quot;author&amp;quot;: &amp;quot;David Herman&amp;quot;,
      &amp;quot;image&amp;quot;: &amp;quot;images/effectivejs.jpg&amp;quot;,
      &amp;quot;amazonLink&amp;quot;: &amp;quot;http://amzn.to/1pLu1A5&amp;quot;
    },
    &amp;quot;book3&amp;quot; : {
      &amp;quot;title&amp;quot;: &amp;quot;JavaScript: The Good Parts&amp;quot;,
      &amp;quot;author&amp;quot;: &amp;quot;Douglas Crockford&amp;quot;,
      &amp;quot;image&amp;quot;: &amp;quot;images/goodparts.jpg&amp;quot;,
      &amp;quot;amazonLink&amp;quot;: &amp;quot;http://amzn.to/1ukjoIN&amp;quot;
    },
    &amp;quot;book4&amp;quot; : {
      &amp;quot;title&amp;quot;: &amp;quot;Eloquent Javascript&amp;quot;,
      &amp;quot;author&amp;quot;: &amp;quot;Marijn Haverbeke&amp;quot;,
      &amp;quot;image&amp;quot;: &amp;quot;images/eloquentjavascript.jpg&amp;quot;,
      &amp;quot;amazonLink&amp;quot;: &amp;quot;http://amzn.to/1lPP6pn&amp;quot;
    }
  };
  
  var template = document.querySelector(&amp;quot;#singleBook&amp;quot;),
    templateContent = template.content,
    host = document.querySelector(&amp;quot;#allBooks&amp;quot;),
    root = host.createShadowRoot();

  for (key in jsBooks) {
    var title = jsBooks[key].title,
      author = jsBooks[key].author,
      image = jsBooks[key].image,
      amazonLink = jsBooks[key].amazonLink;

    templateContent.querySelector(&amp;quot;img&amp;quot;).src = image;
    templateContent.querySelector(&amp;quot;img&amp;quot;).alt 
    = templateContent.querySelector(&amp;quot;#bookTitle&amp;quot;).innerHTML
    = title;
    templateContent.querySelector(&amp;quot;#bookAuthor&amp;quot;).innerHTML = author;
    templateContent.querySelector(&amp;quot;#btnPurchase&amp;quot;).href = amazonLink;
    root.appendChild(document.importNode(templateContent, true));
  }
})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; contains both &lt;code&gt;normalize.css&lt;/code&gt; and the main Twitter Bootstrap CSS file. Bootstrap is providing responsive functionality, but is mostly here to make parts of the site look pretty. &lt;code&gt;styles.css&lt;/code&gt; adds extra styling to some page elements and has a very small role in the project.&lt;/p&gt;

&lt;p&gt;Past that, there&#39;s some basic HTML but there&#39;s also the Web Component-centric template tag that has an ID of &lt;code&gt;singleBook&lt;/code&gt;. The code inside of &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; contains HTML and some CSS in a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;The template contains an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag: this is where the book data in the JS object will be parsed as content. The template tag is also inert, meaning it&#39;s not visible on page load and can&#39;t communicate with any outside code until we say so.&lt;/p&gt;

&lt;p&gt;Note that some parts of &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; are empty:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the two &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;alt&lt;/code&gt; attributes for the only &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;href&lt;/code&gt; attribute for the only &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This empty parts will be populated with our object data...let&#39;s look at that...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;(function(){
...
})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Everything&#39;s wrapped in an &lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/&quot; title=&quot;Read more about IIFEs&quot;&gt;IIFE&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var jsBooks = {
  &amp;quot;book1&amp;quot; : {
    &amp;quot;title&amp;quot;: &amp;quot;Object-Oriented Javascript&amp;quot;,
    &amp;quot;author&amp;quot;: &amp;quot;Stoyan Stefanov&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;images/ooj.jpg&amp;quot;,
    &amp;quot;amazonLink&amp;quot;: &amp;quot;http://amzn.to/1sRFbEC&amp;quot;
  },
...
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The JavaScript data object. There&#39;s only one item one listed here but it contains four items altogether, each about a particular JavaScript book.  Each item has a &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt; and &lt;code&gt;amazonLink&lt;/code&gt; property.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var template = document.querySelector(&amp;quot;#singleBook&amp;quot;),
  templateContent = template.content,
  host = document.querySelector(&amp;quot;#allBooks&amp;quot;),
  root = host.createShadowRoot();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Starting to create the Shadow DOM. I&#39;m creating a single var pattern to define four variables...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt; is a direct reference to the template, which has an ID of &lt;code&gt;singleBook&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;templateContent&lt;/code&gt; is a direct reference to value of the template&#39;s &lt;code&gt;content&lt;/code&gt; attribute at the time of page-load...the page tags, their attributes. Everything. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template&quot; title=&quot;Read about the &amp;lt;template&amp;gt; tag on MDN&quot;&gt;Read more over on MDN&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt; is a direct reference to what&#39;s known as the &quot;shadow host&quot; and it&#39;s the page element where template content gets load into.  That&#39;s the &lt;code&gt;&amp;lt;section id=&quot;allBooks&quot;&amp;gt;&lt;/code&gt; page element in this case. This is commonly referred to as the &quot;shadow host&quot; and it can have any variable name you want, but it&#39;s convention to name it &quot;host.&quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt; is a direct reference to what&#39;s known as the &quot;shadow root&quot; and it&#39;s referring to the content that that gets generated &lt;em&gt;INSIDE&lt;/em&gt; the template. Thanks to the &lt;code&gt;host.createShadowRoot()&lt;/code&gt; line, I&#39;m placing this content inside of &lt;code&gt;host&lt;/code&gt;, which, again, is the &lt;code&gt;&amp;lt;section id=&quot;allBooks&quot;&amp;gt;&lt;/code&gt; element...it may be easier to think of it as the actual Shadow DOM. When the content has fully loaded into the root, it gets returned to the web page as a document fragment...&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment&quot; title=&quot;Read about document fragments&quot;&gt;read more about document fragments&lt;/a&gt; It also can also have any variable name you want to give it, but it&#39;s convention to name it &quot;root.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;for (key in jsBooks) {
...
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;A for...in loop will populate the template with the content in the &quot;jsBooks&quot; object. That code needs to be broken down...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var title = jsBooks[key].title,
  author = jsBooks[key].author,
  image = jsBooks[key].image,
  amazonLink = jsBooks[key].amazonLink;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Assign simple variable references to all the single item properties in the &lt;code&gt;jsBooks&lt;/code&gt; object.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;templateContent.querySelector(&amp;quot;img&amp;quot;).src = image;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Look for the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag in the template and populate its &lt;code&gt;src&lt;/code&gt; attribute with whatever the value is of the &quot;image&quot; property at the time of the loop.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;templateContent.querySelector(&amp;quot;img&amp;quot;).alt 
  = templateContent.querySelector(&amp;quot;#bookTitle&amp;quot;).innerHTML
  = title;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Look for the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag in the template and populate its &lt;code&gt;alt&lt;/code&gt; attribute with whatever the value is of the &quot;title&quot; property at the time of the loop.&lt;/p&gt;

&lt;p&gt;At the same time, look for the &lt;code&gt;#bookTitle&lt;/code&gt; element in the template (one of the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags) and populate it with whatever the value is of the &quot;title&quot; property is at the time of the loop.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;templateContent.querySelector(&amp;quot;#bookAuthor&amp;quot;).innerHTML = author;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Look for the &lt;code&gt;#bookAuthor&lt;/code&gt; element in the template (the other &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag) and populate it with whatever the value is of the &quot;author&quot; property at the time of the loop.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;templateContent.querySelector(&amp;quot;#btnPurchase&amp;quot;).href = amazonLink;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Look for the &lt;code&gt;#btnPurchase&lt;/code&gt; element in the template (the only &lt;code&gt;a&lt;/code&gt; tag) and populate its &quot;href&quot; attribute with whatever the value is of the current &lt;code&gt;amazonLink&lt;/code&gt; property at the time of the loop.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;root.appendChild(document.importNode(templateContent, true));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Okay, we need to spend some time talking about this line of code...&lt;/p&gt;

&lt;p&gt;At this point in the code, all my object data has populated the template and is represented by the &lt;code&gt;templateContent&lt;/code&gt; variable. But this is what was returned as a document fragment.&lt;/p&gt;

&lt;p&gt;The document fragment isn&#39;t part of the page DOM and, in this case, needs to be treated as an external document. The &lt;code&gt;document.importNode()&lt;/code&gt; method can duplicate content from external documents, and by passing the &lt;code&gt;true&lt;/code&gt; parameter, we&#39;re doing a deep copy of the content and copying &lt;em&gt;everything&lt;/em&gt; inside of it.&lt;/p&gt;

&lt;p&gt;From there, we&#39;re treating the &lt;code&gt;root&lt;/code&gt; as a parent element and appending (i.e., &quot;adding&quot;) a child inside of it. The child we&#39;re adding is the template content we just brought over with &lt;code&gt;document.importNode()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Side note: &lt;code&gt;document.importNode()&lt;/code&gt; is cool...&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/document.importNode&quot; title=&quot;&amp;quot;Read about document.importNode() on MDN&quot;&gt;read more about it over on MDN&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And if we review index.html in Chrome 36 or higher with the &quot;Show user agent shadow DOM&quot; box checked, it should look (almost) like the demo. And if we then do an &quot;Inspect Element&quot; check and look in the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; tag (which is the shadow host), you&#39;ll see the template content (which is the shadow root).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/shadow-root.png&quot; class=&quot;imgBorderMaxWidth&quot; alt=&quot;The shadow host in the shadow root&quot;&gt;&lt;/p&gt;

&lt;p&gt;But there&#39;s a problem: Bootstrap styles that are applied to certain elements inside of &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; are being ignored.  Anything class names containing the word &lt;code&gt;panel&lt;/code&gt; or &lt;code&gt;btn&lt;/code&gt; should have well-recognized Bootstrap styles, especially the buttons...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/pageScreenshot.jpg&quot; class=&quot;imgBorderMaxWidth&quot; alt=&quot;homepage screenshot with no Bootstrap styling&quot;&gt;&lt;/p&gt;

&lt;p&gt;This is happening because, as mentioned above, the code inside the template can&#39;t communicate with any outside code and, technically speaking, &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; is in the Shadow DOM, which is naturally-encapsulated. So none of the page&#39;s three stylesheets (&lt;code&gt;normalize.min.css&lt;/code&gt;, &lt;code&gt;bootstrap.min.css&lt;/code&gt; and &lt;code&gt;styles.css&lt;/code&gt;) can affect the template&#39;s layout. And for now, adding stylesheets to the Shadow DOM with &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; isn&#39;t allowed.&lt;/p&gt;

&lt;h3&gt;Import the styles&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;styles.css&lt;/code&gt; doesn&#39;t need to interact with the layout but the other two have to.  The solution is to use &lt;code&gt;@import&lt;/code&gt; inside the template&#39;s &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag to bring both of them in:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-css&#39;&gt;&amp;lt;style&amp;gt;
  @import url(&amp;quot;css/normalize.min.css&amp;quot;);
  @import url(&amp;quot;css/bootstrap.min.css&amp;quot;);
...
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Using &lt;code&gt;@import&lt;/code&gt; is frowned upon from a performance standpoint, but it&#39;s how this particular problem gets solved. And as Google&#39;s Rob Dodson points out in his &lt;a href=&quot;http://css-tricks.com/modular-future-web-components/&quot; title=&quot;Read Rob Dodson&#39;s great Web Component article on CSS Tricks&quot;&gt;excellent Web Components article&lt;/a&gt;, using Polymer avoids doing this by bringing in the stylesheets with XHR requests.&lt;/p&gt;

&lt;p&gt;But there&#39;s another problem: by doing deep clones of template content at each loop iteration, the style tag is getting added four times when it really only needs to be added once.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/shadow-root-02.png&quot; class=&quot;imgBorderMaxWidth&quot; alt=&quot;The shadow host in the shadow root&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Adjust the loop&lt;/h3&gt;

&lt;p&gt;This can be fixed by changing the loop procedure: every time the loop runs, deep-copy &lt;em&gt;just&lt;/em&gt; the article tag by referring to its &quot;templateArticle&quot; class, then append it to the section tag. Leave the loop after it&#39;s ended, then append the style tag to section, which is the shadow host.&lt;/p&gt;

&lt;p&gt;This requires changing the end of the JavaScript from this...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;(function(){
...
    root.appendChild(document.importNode(templateContent, true));
  }
})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;...to this&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;(function(){
...
    root.appendChild(document.importNode(templateContent.querySelector(&amp;quot;.templateArticle&amp;quot;), true));
  }
  root.appendChild(document.importNode(templateContent.querySelector(&amp;quot;style&amp;quot;), true));
})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And now there&#39;s only one style tag inside the shadow root and it&#39;s properly applying the styles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/shadow-root-03.png&quot; class=&quot;imgBorderMaxWidth&quot; alt=&quot;The shadow host in the shadow root&quot;&gt;&lt;/p&gt;

&lt;p&gt;Because &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; gets added to &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; with &lt;code&gt;appendChild()&lt;/code&gt;, it gets placed at the bottom.  Were this live production code, I would (probably) use something like &lt;code&gt;jQuery.prepend()&lt;/code&gt; to place it at the top.&lt;/p&gt;

&lt;p&gt;But placing it at the bottom doesn&#39;t affect my goals for this project, which was to learn how templates and Shadow DOM work. Still, read more about &lt;code&gt;jQuery.prepend()&lt;/code&gt; &lt;a href=&quot;http://api.jquery.com/prepend/&quot; title=&quot;Read about jQuery.prepend()&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Further reading&lt;/h3&gt;

&lt;p&gt;There are links above to a Rob Dodson article and a group of links to various articles over on HTML5 Rocks. The Dodson article provides a great high-level view of Web Components so if you&#39;re at the early stages of discovering them, I would read that one first...the HTML5 Rocks articles next.&lt;/p&gt;

&lt;p&gt;The W3C has an older article called &lt;a href=&quot;http://www.w3.org/TR/2013/WD-components-intro-20130606/&quot; title=&quot;Read Introduction to Web Components&quot;&gt;Introduction to Web Components&lt;/a&gt;. It&#39;s a working draft and is over a year old based on this post&#39;s publish date but is still another high-level view that&#39;s slightly more technical....read it while keeping in mind it&#39;s old and hasn&#39;t been updated in a while.&lt;/p&gt;

&lt;p&gt;Truthfully, the W3C has been referring people to the &lt;a href=&quot;http://www.w3.org/wiki/WebComponents/&quot; title=&quot;Read the Web Components Wiki&quot;&gt;Web Components Wiki&lt;/a&gt; lately so you should review that.  It points to the HTML5 Rocks links and the specs for &lt;a href=&quot;http://w3c.github.io/webcomponents/spec/shadow/&quot; title=&quot;Read the Shadow DOM specification&quot;&gt;Shadow DOM&lt;/a&gt;, &lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/&quot; title=&quot;Read the Shadow Custom Elements specification&quot;&gt;Custom Elements&lt;/a&gt; and &lt;a href=&quot;http://w3c.github.io/webcomponents/spec/imports/&quot; title=&quot;Read the HTML Imports specification&quot;&gt;HTML Imports&lt;/a&gt;. The WHATWG has the proper version of &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting.html#the-template-element&quot; title=&quot;Read about Web Component template specification&quot;&gt;the Template spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Specs may be verbose to read at times, but it&#39;s always a good idea to read them.&lt;/p&gt;

&lt;p&gt;Most profoundly, Microsoft has made no firm decision on what Web Component features Internet Explorer will and will not support at the time of this post&#39;s publish date. I&#39;m assuming that will change in the future though...read more on the &lt;a href=&quot;http://status.modern.ie/?iestatuses=underconsideration&amp;amp;browserstatuses=notsupported,indevelopment,implemented&amp;amp;browsers=chrome,firefox,opera,safari&amp;amp;ieversion=11&quot; title=&quot;Read about Web Component support in Internet Explorer&quot;&gt;modern.ie status page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pointing out the IE issues makes a nice segue to polyfills...take note that Polymer is the most popular Web Component polyfill for now, but only supports IE 10 and up.  Read more on &lt;a href=&quot;http://www.polymer-project.org/resources/compatibility.html&quot; title=&quot;Read about browser compatibility for Polymer&quot;&gt;Polymer&#39;s Browser Compatibility page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;X-Tag isn&#39;t as feature-rich as Polymer but supports a wider array of browsers, including IE 9 and up. Read more on &lt;a href=&quot;http://x-tags.org/docs&quot; title=&quot;Read about browser compatibility for X-Tags&quot;&gt;X-Tag&#39;s Docs page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Using something like Polymer or X-Tag is what&#39;s needed to use Web Components in production-level code right now, but these libraries work ON TOP of Web Components. So it&#39;s best to learn the underlying code first.&lt;/p&gt;

&lt;p&gt;I can&#39;t say that my code is perfect, but I achieved the goal I set for myself and was able to solve any problems I faced by actually writing the code instead of just reading about it. I have a much better handle in templates and Shadow DOM then I did before, and that&#39;s enough.&lt;/p&gt;
</description>
				<pubDate>Wed, 13 Aug 2014 00:00:00 -0400</pubDate>
				<link>http://kaidez.com/web-components-demo/</link>
				<guid isPermaLink="true">http://kaidez.com/web-components-demo/</guid>
			</item>
		
			<item>
				<title>REVIEW: Downloaded</title>
				<description>&lt;p&gt;With all the focus we place on our iPhones, iPads, iPods, Droids, Windows Phones, Nexuses, etc., it&#39;s easy to forget that Napster, the controversial music file sharing software, was a major spark for mobile convergence. Napster let millions of people download as much music as they wanted to for free, demonstrating how pervasive music was.  Apple capitalized on that by creating an easy-to-use portable device to manage the music, a device that was the catalyst for an era of mobile innovation that&#39;s really only JUST beginning.&lt;/p&gt;

&lt;p&gt;Directed by Alex Winter of &quot;Bill &amp;amp; Ted&quot; fame (as well as &lt;a href=&quot;https://www.youtube.com/watch?v=dBLUrDOxVX4&quot; title=&quot;Watch Butthole Surfers &#39;Entering Texas Bar-B-Que Movie&#39;&quot;&gt;that bizarre, NSFW Butthole Surfers movie&lt;/a&gt;), &lt;em&gt;Downloaded&lt;/em&gt; is a great reminder of Napster&#39;s importance and gives them credit where credit is due. But it makes no mention of how the company MIGHT have survived its legal problems were it not for certain business decisions...decisions that were mostly made by one man.&lt;/p&gt;

&lt;p&gt;Despite that one shortcoming, &lt;em&gt;Downloaded&lt;/em&gt; is a movie that HAD to be made. No one has ever really denied Napster&#39;s historical importance but not enough have gone out the way to emphasize it.&lt;/p&gt;

&lt;p&gt;Napster was the first real instance of the Internet-based business model pulling consumers away from the old economy business model. Or, to quote from one of the &lt;em&gt;Downloaded&lt;/em&gt; interviewees, &quot;This is the first time technology actually attacked the existing system and started to take it away.&quot;&lt;/p&gt;

&lt;p&gt;Napster&#39;s rise began at the tail-end of the dotcom rush, just as the old economy started walking away from Internet due its uncertain profit model. But when they saw how Napster gave consumers exactly what they wanted, while all but destroying the music industry in the process, they regrouped their Internet efforts instead of ignoring them. Napster forced the old economy to take the Internet seriously.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Downloaded&lt;/em&gt; starts with a short but excellent introductory history of the Internet and nicely segues into Napster&#39;s beginnings. How Shawn Fanning was trying to make it easier to find MP3 music files and how, with the input of his friends from IRC such as Sean Parker and Jordan Ritter, he knocked out the first version of Napster.&lt;/p&gt;

&lt;p&gt;It shows how Fanning and the other Napster developers would work around the clock to improve the software, all of whom would get a the rush after solving and figuring out problems. Combine that with many of them living and partying together, and a camaraderie was created among the team as it continued to better the Napster software.  In effect, &lt;em&gt;Downloaded&lt;/em&gt; provides an excellent snapshot of the hacking culture that&#39;s so prevalent nowadays.&lt;/p&gt;

&lt;p&gt;Music artists such as Henry Rollins, Noel Gallagher from Oasis and DJ Spooky (who also created &lt;em&gt;Downloaded&#39;s&lt;/em&gt; soundtrack) make excellent points about the how music business was way behind on tech. Music biz men like Chris Blackwell from Island Records, Seymour Stein from Sire and former Sony Music CEO Don Ienner provide an excellent historical perspective of the music biz.&lt;/p&gt;

&lt;p&gt;Also interviewed is Hilary Rosen, who was president of the Recording Industry Association of America (RIAA) at the time of the Napster incident, and whom was painted as public enemy number one by the pro-Naspter community during the legal fight. While she certainly makes arguments in favor of the music industry, she also concedes that the industry got rid of their technology departments, which allowed things like Napster to come about. In terms of other music biz mistakes, Chris Blackwell properly counters the record label&#39;s argument that Napster was taking money out of musician&#39;s pockets, pointing out that the labels didn&#39;t pay them that much anyway.&lt;/p&gt;

&lt;p&gt;Despite the industry&#39;s mistakes, and they made many, Napster was illegal and the industry had a strong case against Napster when they eventually sued the company. And in discussing the case, &lt;em&gt;Downloaded&lt;/em&gt; is a little skewed in favor of Napster.&lt;/p&gt;

&lt;p&gt;For example: Parker, Fanning and other Napster employees claim the music industry refused to settle the case once it went to court. True, but &lt;em&gt;Downloaded&lt;/em&gt; misses that fact that the RIAA only filed suit on the industry&#39;s behalf after many failed attempts to reach an agreement with Napster, who gave the industry the runaround throughout the entire process.&lt;/p&gt;

&lt;p&gt;The employees also say that they regret not at least &lt;em&gt;trying&lt;/em&gt; to get the Supreme Court to hear the case after losing in Appeals Court. But that only could have happened if the Ninth Circuit court heard it first, which they chose not to do-another point that the movie fails to mention.&lt;/p&gt;

&lt;p&gt;But the way in which &lt;em&gt;Downloaded&lt;/em&gt; presents the music industry&#39;s legal position is really just a matter of opinion and not a drawback of the documentary. What is a drawback (a BIG drawback) is that &lt;em&gt;Downloaded&lt;/em&gt; rarely mentions the man who made lots of rash decisions that prevented Napster from properly dealing with its legal problems, something they REALLY had to do.&lt;/p&gt;

&lt;p&gt;That man isn&#39;t Shawn Fanning, it&#39;s his uncle, John. And while Shawn was certainly the public face of Napster in the press, John Fanning was in charge of the company.&lt;/p&gt;

&lt;p&gt;As chronicled in Joseph Menn&#39;s &lt;a href=&quot;http://www.amazon.com/gp/product/0609610937/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0609610937&amp;amp;linkCode=as2&amp;amp;tag=kaidez-20&quot; title=&quot;Buy &#39;All The Rave&#39; at amazon.com&quot;&gt;&lt;em&gt;All the Rave: The Rise and Fall of Shawn Fanning&#39;s Napster&lt;/em&gt;&lt;/a&gt; (which &lt;a href=&quot;/books-dotcom-rush/&quot; title=&quot;Read kaidez&#39;s review of &#39;All the Rave&#39;&quot;&gt;I&#39;ve previously reviewed&lt;/a&gt;), John Fanning, a man with some technical knowledge, looked at Napster and agreed to help his nephew turn it into a business. On the premise that the then 18 year-old Shawn was too young to be taken seriously as the company&#39;s business leader, John convinced his nephew to give him 70% ownership of the company, giving Shawn only 30%.&lt;/p&gt;

&lt;p&gt;John Fanning&#39;s manipulative moves against his nephew were bad enough, but the end result of these moves was worse. Since the Napster incident occurred during the dotcom bubble, John was always looking to sell Napster and get the big multi-million dollar payoff that was so prevalent at the time.&lt;/p&gt;

&lt;p&gt;But before providing funding, all potential Napster investors not only insisted that the company prioritize dealing with its legal issues before seeking the big payoff, but also wanted to reduce John Fanning&#39;s role in the company...removing it completely in some cases. John realized this and as he was majority owner, turned down practically every good funding offer that the company received, including one invloving venture capitalist powerhouse, &lt;a href=&quot;http://www.kpcb.com/&quot; title=&quot;Visit the Kleiner Perkins Caufield &amp;amp; Byers&quot;&gt;Kleiner Perkins Caufield &amp;amp; Byers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a result of John&#39;s decisions, Napster was never forced to properly deal with its legal problems, making their getting sued an inevitability. &lt;em&gt;All the Rave&lt;/em&gt; effectively argues that if they had dealt with them, Naspter may have survived.&lt;/p&gt;

&lt;p&gt;The book&#39;s characterization of John Fanning could also be chalked up as a matter of opinion, but it&#39;s backed up by legal documents and corroborated statements, lending the characterization an air of validity. So the matter deserves at least a discussion about John within &lt;em&gt;Downloaded&lt;/em&gt;...the fact that it doesn&#39;t is disappointing.&lt;/p&gt;

&lt;p&gt;Still, the documentary is still worth watching. &lt;em&gt;Downloaded&lt;/em&gt; properly captures the zeitgeist that Napster generated: the MTV coverage, the legal battles, the congressional hearings, Chuck D., Metallica, the overall happy feeling of using Napster...all are represented well in the movie. Personally, I was very happy to learn that Shawn Fanning would eventually get the multi-million dollar payoff he so richly deserved.&lt;/p&gt;

&lt;p&gt;In the end, &lt;em&gt;Downloaded&lt;/em&gt; isn&#39;t telling any lies, but the whole truth isn&#39;t there. It&#39;s absolutely worth a watch but to understand the entire Napster experience, Joseph Menn&#39;s book is also worth a read.&lt;/p&gt;
</description>
				<pubDate>Fri, 06 Dec 2013 00:00:00 -0500</pubDate>
				<link>http://kaidez.com/downloaded-movie-review/</link>
				<guid isPermaLink="true">http://kaidez.com/downloaded-movie-review/</guid>
			</item>
		
			<item>
				<title>TUTORIAL: Jekyll Search with Non-JavaScript/CSS Fallback</title>
				<description>&lt;p&gt;&lt;a href=&quot;/samples/jekyll-search/&quot; class=&quot;demoLink&quot; target=&quot;blank&quot;&gt;VIEW THE DEMO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;Go to the Jekyll blog engine site&quot;&gt;Jekyll&lt;/a&gt; is a static site generator: it creates static sites instead of database-driven ones. This means that it doesn&#39;t contain the site search functionality commonly bundled into CMS software like &lt;a href=&quot;http://wordpress.org/&quot; title=&quot;Go to wordpress.org&quot;&gt;WordPress&lt;/a&gt; and &lt;a href=&quot;https://drupal.org/&quot; title=&quot;Go to drupal.org&quot;&gt;Drupal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A common solution to this problem is to use some sort of JavaScript-based search functionality, but this won&#39;t work if the end-user has disabled JS in their browser. This tutorial shows you how to not only add JS-powered search functionality to your static site, but also how to create a fallback search method for situations where either JavaScript or, as an added bonus, CSS is disabled.&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#three-steps&quot;&gt;The Three Steps We Need To Take&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#assumptions-notes&quot;&gt;One Assumption...More Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fallback-search-code&quot;&gt;The Fallback Search Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tipue-walkthrough&quot;&gt;A Very Quick Tipue Walkthrough&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#build-pages&quot;&gt;Step 1: Add the JavaScript Detection &amp;amp; Fallback Code to HTML Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-javascript-search&quot;&gt;Step 2: Dynamically Create the JS-powered Search Functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#css-detection&quot;&gt;Step 3: Use JavaScript to Detect if CSS is Disabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#notes&quot;&gt;More Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;three-steps&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;The Three Steps We Need To Take&lt;/h2&gt;

&lt;p&gt;There are three steps we need to take to acheive our goal:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add the JavaScript Detection &amp;amp; Fallback Code to HTML Pages&lt;/strong&gt;: These pages will link to JavaScript and CSS files working together to check for the presence of JavaScript, and will also contain our fallback search functionality, courtesy of Google.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dynamically Create the JS-powered Search Functionality&lt;/strong&gt;: We&#39;ll create it off-DOM first, then load it onto the pages next.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use JavaScript to Detect if CSS is Disabled&lt;/strong&gt;: With JavaScript, we&#39;ll create code that provides the Google fallback search for times when CSS is disabled, but JavaScript is not. Because CSS is disabled, the Google page that returns the search results will not look pretty, but the results will be returned nonetheless.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;assumptions-notes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;One Assumption...More Notes&lt;/h2&gt;

&lt;p&gt;Since we&#39;re talking about creating search for static sites, the only assumption I&#39;m making is that you have either Jekyll or some other static site software installed on your machine, and that you use it regularly.&lt;/p&gt;

&lt;p&gt;Some notes...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Expanding on the one assumption, let&#39;s be clear that the search functionality being described here isn&#39;t Jekyll-specific. This post is based on my personal Jekyll experiences. I haven&#39;t tested this code outside of Jekyll but as it&#39;s dependent on already-existing browser technologies and not any specific software, it should work for situations outside of Jekyll.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The proper way to test this functionality is to disable both JavaScript and CSS &lt;strong&gt;BEFORE&lt;/strong&gt; the code runs in a browser.  Disabling JavaScript before page load in either Chrome or Firefox is easy enough with &lt;a href=&quot;http://chrispederick.com/work/web-developer/&quot; title=&quot;Get Chris Pederick&#39;s Web Developer extension&quot;&gt;Chris Pederick&#39;s Web Developer extension&lt;/a&gt;.  But Pederick&#39;s tool currently can&#39;t disable CSS before page load. It can disable it afterwards but it won&#39;t stay disabled: CSS will be re-enabled after a page refresh and that doesn&#39;t help us. This &lt;a href=&quot;http://stackoverflow.com/questions/14046738/how-to-disable-css-in-browser-for-testing-purposes&quot; title=&quot;Learn how to disable a browser&#39;s CSS&quot;&gt;Stack Overflow post on disabling a browser&#39;s CSS&lt;/a&gt; discusses how to do this for various browsers. Refer to it when doing cross-browser testing before production deployments but for performing rapid tests while in development, both the Firefox and Safari methods seem to be the easiest way to disable CSS before page load. Firefox is &lt;strong&gt;&lt;em&gt;View &amp;gt; Page Style &amp;gt; No Style&lt;/em&gt;&lt;/strong&gt; while Safari is &lt;strong&gt;&lt;em&gt;Develop &gt; Disable Styles&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The JavaScript-powered search in this tutorial is provided by the &lt;a href=&quot;http://www.tipue.com/search/&quot; title=&quot;Read more about Tipue Search&quot;&gt;Tipue search plugin for jQuery&lt;/a&gt; but this post does not go into great detail on how of Tipue works. It bullet points what the code is doing to provide context for this tutorial, but that&#39;s it.  &lt;a href=&quot;http://www.tipue.com/search/docs/&quot; title=&quot;Read the Tipue documentation&quot;&gt;Read the Tipue documentation&lt;/a&gt; to fully understand how it works. Also, this method should work using static site search solutions other than Tipue: you will have to make code adjustments in some places, but it should still work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At some point while reading this, you may say to yourself, &quot;Isn&#39;t it easier to just place the fallback code inside a &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag?&quot;...maybe, but that doesn&#39;t always work.  Plus, if you&#39;re coding in XHTML instead of any version of HTML, &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; won&#39;t work at all. &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/scripting-1.html#the-noscript-element&quot; title=&quot;Read the noscript section of the HTML5 specification&quot;&gt;The W3C&#39;s HTML5 specification is clear about all this&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;fallback-search-code&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;The Fallback Search Code&lt;/h2&gt;

&lt;p&gt;Before we get to the three steps, we need to understand some things about the fallback code...&lt;/p&gt;

&lt;p&gt;Our fallback search functionality comes from &lt;a href=&quot;https://www.google.com/cse&quot; title=&quot;Learn more about Google Custom Search Engine (CSE)&quot;&gt;Google Custom Search Engine (CSE)&lt;/a&gt;, which comes in three versions at the time of this post. This tutorial uses the oldest version as it best suits our needs and although it&#39;s old, it&#39;s still widely in use, particularly on sites using &lt;a href=&quot;http://octopress.org/&quot; title=&quot;Learn about the Octopress framework for Jekyll&quot;&gt;the Octopress framework for Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://support.google.com/customsearch/answer/1351747?hl=en&quot; title=&quot;Read Google&#39;s recommended way to use Google CSE with a form tag&quot;&gt;The second version&lt;/a&gt; is very similar to the first version and works when JavaScript is disabled, but adds an extra click-through to the user experience when compared to the first one...not what I wanted. &lt;a href=&quot;https://developers.google.com/custom-search/docs/element&quot; title=&quot;Read the official recommendation for Google CSE search boxes&quot;&gt;The third version is what Google currently recommends&lt;/a&gt; but is a pure JavaScript version that won&#39;t work if JS is disabled...also, not what I wanted.&lt;/p&gt;

&lt;p&gt;Let&#39;s look at version 1 of the code we&#39;ll be using:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Search For Content&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Search here...&amp;lt;/h1&amp;gt;
  &amp;lt;form action=&amp;quot;http://google.com/search&amp;quot; method=&amp;quot;get&amp;quot;&amp;gt;
    &amp;lt;fieldset role=&amp;quot;search&amp;quot;&amp;gt;
      &amp;lt;!-- change the &amp;quot;value&amp;quot; attribute below to point to your site --&amp;gt;
      &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;q&amp;quot; value=&amp;quot;site:yoursite.com&amp;quot;/&amp;gt;
      &amp;lt;input class=&amp;quot;search&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;q&amp;quot; results=&amp;quot;0&amp;quot; placeholder=&amp;quot;Search&amp;quot;/&amp;gt;
    &amp;lt;/fieldset&amp;gt;
  &amp;lt;/form&amp;gt; 
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Note the setting of the &lt;code&gt;value&lt;/code&gt; attribute in the first &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag: &quot;yoursite.com&quot;. You would need to change this to whatever your site URL is. Once that&#39;s done, any searches entered into this searchbox will return the results for that site, and return them inside a standard Google search results page.&lt;/p&gt;

&lt;p&gt;To be honest: if you want search engine functionality on your static site, you really can just apply a Google CSE solution and move on. The reason I went beyond Google CSE was because I wanted to deliver a certain experience on kaidez.com: when people performed a search on my site, I wanted them to stay on my site.&lt;/p&gt;

&lt;p&gt;None of the current CSE solutions do this, so I went with Tipue while using version 1 for my fallback code.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;tipue-walkthrough&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;A Very Quick Tipue Walkthrough&lt;/h2&gt;

&lt;p&gt;Very quick...&lt;/p&gt;

&lt;p&gt;Tipue is a jQuery plugin that provides static search. The search results must be returned to a properly-configured &lt;code&gt;search.html&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;Along with the &lt;code&gt;search.html&lt;/code&gt; page, Tipue also needs five JS files to work and they should be listed in the following order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the core jQuery library.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tipuesearch_content.js&lt;/code&gt;, which contains the searchable site data that&#39;s returned to &lt;code&gt;search.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tipuesearch_set.js&lt;/code&gt;, which filters words and phrases in the search results.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;js/tipuesearch.min.js&lt;/code&gt;, which is the core Tipue code.&lt;/li&gt;
&lt;li&gt;a file containing the executable Tipue code that returns search results to &lt;code&gt;search.html&lt;/code&gt;...this code will be placed in a file called &lt;code&gt;js/scripts.js&lt;/code&gt; and we&#39;ll discuss it shortly.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a name=&quot;build-pages&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Step 1: Add the JavaScript Detection &amp;amp; Fallback Code to HTML Pages&lt;/h2&gt;

&lt;p&gt;We need to create web pages that include references to both a &lt;code&gt;.css&lt;/code&gt; file and two more &lt;code&gt;.js&lt;/code&gt; files. We&#39;re not going to review any of the Tipue-related files we just discussed as they don&#39;t play a role in the JS detection process, but these other files do play a role:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;search.html&lt;/li&gt;
&lt;li&gt;css/styles.css&lt;/li&gt;
&lt;li&gt;js/detect.js&lt;/li&gt;
&lt;li&gt;js/scripts.js&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let&#39;s review these files...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot; class=&amp;quot;no-js&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Search For Content&amp;lt;/title&amp;gt;
  &amp;lt;link href=&amp;quot;http://fonts.googleapis.com/css?family=Open+Sans:300,400&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
  &amp;lt;link href=&amp;quot;css/tipuesearch.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
  &amp;lt;link href=&amp;quot;css/styles.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
  &amp;lt;script src=&amp;quot;js/detect.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&amp;quot;container&amp;quot; class=&amp;quot;containerClass&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Search here...&amp;lt;/h1&amp;gt;

    &amp;lt;!-- Tipue Search box will go here --&amp;gt;
    &amp;lt;div id=&amp;quot;searchbox&amp;quot;&amp;gt; &amp;lt;/div&amp;gt;

    &amp;lt;!-- Google CSE search box starts here --&amp;gt;
    &amp;lt;div id=&amp;quot;no-js-searchbox&amp;quot;&amp;gt;
      &amp;lt;form action=&amp;quot;http://google.com/search&amp;quot; method=&amp;quot;get&amp;quot;&amp;gt;
        &amp;lt;fieldset role=&amp;quot;search&amp;quot;&amp;gt;
          &amp;lt;!-- change the &amp;quot;value&amp;quot; attribute below to point to your site --&amp;gt;
          &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;q&amp;quot; value=&amp;quot;site:yoursite.com&amp;quot;/&amp;gt;
          &amp;lt;input class=&amp;quot;search&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;q&amp;quot; results=&amp;quot;0&amp;quot; placeholder=&amp;quot;Search&amp;quot;/&amp;gt;
        &amp;lt;/fieldset&amp;gt;
      &amp;lt;/form&amp;gt; 
    &amp;lt;/div&amp;gt;
    &amp;lt;!-- Google CSE search box ends here --&amp;gt;

  &amp;lt;/div&amp;gt;

  &amp;lt;script src=&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;window.jQuery || document.write(&amp;#39;&amp;lt;script src=&amp;quot;js/libs/jquery-1.10.2.min.js&amp;quot;&amp;gt;&amp;lt;\/script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;js/tipuesearch_content.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;js/tipuesearch_set.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;js/tipuesearch.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;js/scripts.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The key parts of the file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;code&gt;no-js&lt;/code&gt; class is attached to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element. This will help us detect whether or not JavaScript is enabled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are three CSS files but the first two are just there as per Tipue documentation...they load in Google Fonts, apply some styling and don&#39;t play a role in the detection process. The last file, &lt;code&gt;css/styles.css&lt;/code&gt;, also applies some styling but contains a selector called &lt;code&gt;.js #no-js-searchbox&lt;/code&gt;, which plays a HUGE role in the detection process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There&#39;s a file called &lt;code&gt;js/detect.js&lt;/code&gt; which detects whether or not JavaScript is enabled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Google search box is on the page and has an id name of &lt;code&gt;no-js-searchbox&lt;/code&gt;. It&#39;s partially being targeted by the &lt;code&gt;.js #no-js-searchbox&lt;/code&gt; selector we just talked about...this may not make sense now, but it will shortly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Tipue search box is &lt;em&gt;not&lt;/em&gt; on the page. As previously mentioned, we&#39;re going to use JavaScript to build it off-DOM first, then load it onto the page. We&#39;ll load it specifically into a page element called &lt;code&gt;&amp;lt;div id=&quot;searchbox&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;js/scripts.js&lt;/code&gt; is also on the page and we&#39;ll soon see that for now, it only contains the code needed to execute Tipue searches. But as we move forward, it will be the place where we add both the code needed to build things off-DOM and our JS detection code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;search.html&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot; class=&amp;quot;no-js&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Search Results&amp;lt;/title&amp;gt;
  &amp;lt;link href=&amp;quot;http://fonts.googleapis.com/css?family=Open+Sans:300,400&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
  &amp;lt;link href=&amp;quot;css/tipuesearch.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
  &amp;lt;link href=&amp;quot;css/styles.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
  &amp;lt;script src=&amp;quot;js/detect.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&amp;quot;container&amp;quot; class=&amp;quot;containerClass&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Search Results&amp;lt;/h1&amp;gt;

    &amp;lt;!-- Tipue Search box will go here --&amp;gt;
    &amp;lt;div id=&amp;quot;searchbox&amp;quot;&amp;gt; &amp;lt;/div&amp;gt;

    &amp;lt;!-- Google CSE search box starts here --&amp;gt;
    &amp;lt;div id=&amp;quot;no-js-searchbox&amp;quot;&amp;gt;
      &amp;lt;form action=&amp;quot;http://google.com/search&amp;quot; method=&amp;quot;get&amp;quot;&amp;gt;
        &amp;lt;fieldset role=&amp;quot;search&amp;quot;&amp;gt;
          &amp;lt;!-- change the &amp;quot;value&amp;quot; attribute below to point to your site --&amp;gt;
          &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;q&amp;quot; value=&amp;quot;site:yoursite.com&amp;quot;/&amp;gt;
          &amp;lt;input class=&amp;quot;search&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;q&amp;quot; results=&amp;quot;0&amp;quot; placeholder=&amp;quot;Search&amp;quot;/&amp;gt;
        &amp;lt;/fieldset&amp;gt;
      &amp;lt;/form&amp;gt; 
    &amp;lt;/div&amp;gt;
    &amp;lt;!-- Google CSE search box ends here --&amp;gt;

  &amp;lt;/div&amp;gt;

  &amp;lt;div id=&amp;quot;tipue_search_content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  
  &amp;lt;script src=&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;window.jQuery || document.write(&amp;#39;&amp;lt;script src=&amp;quot;js/libs/jquery-1.10.2.min.js&amp;quot;&amp;gt;&amp;lt;\/script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;js/tipuesearch_content.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;js/tipuesearch_set.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;js/tipuesearch.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;js/scripts.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Again, &lt;code&gt;search.html&lt;/code&gt; is the page where Tipue returns the search results.  It&#39;s similar to &lt;code&gt;index.html&lt;/code&gt; but has an extra tag: &lt;code&gt;&amp;lt;div id=&quot;tipue_search_content&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;. This is the page element where Tipue places the search results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;css/styles.css&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-css&#39;&gt;.js #no-js-searchbox {
  display: none;
}

/* 
 * The code below is just applying styles and has nothing to do with
 * the CSS/JS detection process. 
 */
body {
  font: 12px/1.7 &amp;#39;open sans&amp;#39;, sans-serif;
}

h1 {
  text-align: center;
}

form, p {
  text-align: center;
}

.containerClass {
  margin: 0 auto;
  width: auto;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;As mentioned, the &lt;code&gt;.js #no-js-searchbox&lt;/code&gt; is the key class here...the rest of the styles just add generic styling. &lt;code&gt;.js #no-js-searchbox&lt;/code&gt; will hide the Google CSE search &lt;em&gt;only when JavaScript is enabled&lt;/em&gt;...let&#39;s start breaking down how that&#39;s done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;js/detect.js&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;// This code is stolen from Modernizr so if Modernizr is already on
// your web page, don&amp;#39;t use this part of the code.

// This code is one file and not inline because it&amp;#39;s a best practice as
// per the Content Security Policy (CSP). Mike West breaks CSP down really
// well over at: http://bit.ly/KzGWUZ. Also make sure to read the CSP
// W3C spec at: http://bit.ly/vCQbiW

var docElement = document.documentElement;
docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, &amp;#39;$1$2&amp;#39;) + (&amp;#39;js&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;A very important piece of our code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var docElement&lt;/code&gt; is storing a short-hand reference to &lt;code&gt;document.documentElement&lt;/code&gt;, which is a reference to our page&#39;s &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag. &lt;code&gt;docElement.className&lt;/code&gt; is a reference to the tag&#39;s only class: &lt;code&gt;no-js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A regular expression search is run against &lt;code&gt;docElement.className&lt;/code&gt; when the page loads. When the search finds the text &quot;no-js&quot;, it replaces it with the text &quot;js&quot;.&lt;/p&gt;

&lt;p&gt;Our HTML tag will now look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;html lang=&quot;en&quot; class=&quot;js&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because of the class name change and because of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_selectors&quot; title=&quot;Read about CSS descendant selectors&quot;&gt;CSS descendant selectors&lt;/a&gt;, the &lt;code&gt;.js #no-js-searchbox&lt;/code&gt; selector will work and set our Google CSE search box to &lt;code&gt;display:none&lt;/code&gt;. But if JavaScript is disabled, the regular expression search won&#39;t happen.&lt;/p&gt;

&lt;p&gt;If the regular expression search doesn&#39;t happen, it means that the &lt;code&gt;no-js&lt;/code&gt; class will remain in the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag and that the &lt;code&gt;.js #no-js-searchbox&lt;/code&gt; selector cannot be applied; in other words, &lt;em&gt;&lt;strong&gt;if JavaScript is disabled, the Google CSE search box will be visible.&lt;/strong&gt;&lt;/em&gt; This is exactly what we want.&lt;/p&gt;

&lt;p&gt;As the comments say, this code is currently built into &lt;a href=&quot;http://modernizr.com/&quot; title=&quot;Read about the Modernizr feature detection library&quot;&gt;Modernizr&lt;/a&gt; so if Modernizr&#39;s already on your page, you don&#39;t need this code.&lt;/p&gt;

&lt;p&gt;Also, it&#39;s suggested that Modernizr be placed in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag so it can do work before the DOM starts constructing the page content. We&#39;re treating this piece of code the same way for the same reason.&lt;/p&gt;

&lt;p&gt;And as noted in the comments, this code is placed in its own JS file instead of inline because it&#39;s a best practice as per the Content Security Policy (CSP) that&#39;s starting to gain a consensus. Mike West&#39;s &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;&gt;Content Security Policy article on HTML5 Rocks&lt;/a&gt; breaks it down really well but you should still &lt;a href=&quot;http://www.w3.org/TR/CSP/&quot; title=&quot;Read the W3C&#39;s Content Security Policy spec&quot;&gt;read the W3C&#39;s Content Security Policy spec&lt;/a&gt; sooner than later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;js/scripts.js&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;(function(){

  // The Tipue-powered code that returns search results to
  // &amp;quot;search.html&amp;quot;.
  $(function() {
    $(&amp;#39;#tipue_search_input&amp;#39;).tipuesearch();
  });

})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This file is just running our Tipue search code, which has absolutely nothing to do with the JS/CSS detection. But again, it&#39;s where we&#39;re going to add our remaining code and it&#39;s the only file we&#39;re really going to talk for the rest of this post.&lt;/p&gt;

&lt;p&gt;At this point we&#39;ve established the basic structure for our pages as well as our system for detecting whether or not JavaScript is enabled. We also understand that if JavaScript is disabled, the Google search box will be visible.&lt;/p&gt;

&lt;p&gt;Let&#39;s now go to step two and build our Tipue search functionality.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;create-javascript-search&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Step 2: Dynamically Create the JS-powered Search Functionality&lt;/h2&gt;

&lt;p&gt;We now need to create the Tipue search box off-DOM with JavaScript, then load it onto the page. Specifically, we need to create a form on both pages that looks like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-markup&#39;&gt;&amp;lt;form action=&amp;quot;search.html&amp;quot; role=&amp;quot;search&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;q&amp;quot; id=&amp;quot;tipue_search_input&amp;quot; placeholder=&amp;quot;Search...&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Search&amp;quot;&amp;gt;    
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We&#39;ll add this code to our already-existing &lt;code&gt;js/scripts.js&lt;/code&gt; file so it will now look like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;(function(){

  // Tipue code
  $(function() {
    $(&amp;#39;#tipue_search_input&amp;#39;).tipuesearch();
  });

  var loadSearchBox = document.getElementById(&amp;quot;searchbox&amp;quot;),
    frag = document.createDocumentFragment(),
    form = document.createElement(&amp;quot;form&amp;quot;),
    searchTextBox = document.createElement(&amp;quot;input&amp;quot;),
    searchButton = document.createElement(&amp;quot;input&amp;quot;);
    
  form.action = &amp;quot;search.html&amp;quot;;
  form.setAttribute(&amp;quot;role&amp;quot;, &amp;quot;search&amp;quot;);

  searchTextBox.type = &amp;quot;text&amp;quot;;
  searchTextBox.name = &amp;quot;q&amp;quot;;
  searchTextBox.id = &amp;quot;tipue_search_input&amp;quot;;
  searchTextBox.placeholder = &amp;quot;Search...&amp;quot;;

  searchButton.type = &amp;quot;submit&amp;quot;;
  searchButton.value = &amp;quot;Search&amp;quot;;

  form.appendChild(searchTextBox);
  form.appendChild(searchButton);

  frag.appendChild(form);

  loadSearchBox.appendChild(frag);
    
})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We already know what the Tipue code is doing so let&#39;s look at the &quot;build the search box code&quot;...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var loadSearchBox = document.getElementById(&amp;quot;searchbox&amp;quot;),
  frag = document.createDocumentFragment(),
  form = document.createElement(&amp;quot;form&amp;quot;),
  searchTextBox = document.createElement(&amp;quot;input&amp;quot;),
  searchButton = document.createElement(&amp;quot;input&amp;quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We&#39;re using a &lt;a href=&quot;http://tech.diaslopes.com/?p=51&quot; title=&quot;Learn more about the single var pattern&quot;&gt;single var pattern&lt;/a&gt; to create five variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loadSearchBox&lt;/code&gt; is a variable reference to &lt;code&gt;&amp;lt;div id=&quot;searchbox&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, which is already on our pages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;frag&lt;/code&gt; is a variable reference to a newly created document fragment, which is basically a virtual box created in browser memory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;form&lt;/code&gt;, &lt;code&gt;searchTextBox&lt;/code&gt; and &lt;code&gt;searchButton&lt;/code&gt; are variable references to newly-created page elements: specifically a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag and two &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags.&lt;/li&gt;
&lt;/ul&gt;


&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;form.action = &amp;quot;search.html&amp;quot;;
form.setAttribute(&amp;quot;role&amp;quot;, &amp;quot;search&amp;quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We have to apply attributes to our three newly-created page elements, starting with the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag. We&#39;re setting the tag&#39;s &lt;code&gt;action&lt;/code&gt; attribute to &lt;code&gt;search.html&lt;/code&gt; (which targets Tipue&#39;s search results page) and setting its &lt;code&gt;role&lt;/code&gt; attribute to &lt;code&gt;search&lt;/code&gt; (which is good from a web semantics standpoint).&lt;/p&gt;

&lt;p&gt;The end result of all this is a form tag which, from a code perspective, looks like this: &lt;code&gt;&amp;lt;form action=&quot;search.html&quot; role=&quot;search&quot;&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;searchTextBox.type = &amp;quot;text&amp;quot;;
searchTextBox.name = &amp;quot;q&amp;quot;;
searchTextBox.id = &amp;quot;tipue_search_input&amp;quot;;
searchTextBox.placeholder = &amp;quot;Search...&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We next have to apply attributes to our first input element.  The main thing we have to do is turn it into a text box: that happens with the &lt;code&gt;searchTextBox.type = &quot;text&quot;&lt;/code&gt; line of code.&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;searchTextBox.name = &quot;q&quot;&lt;/code&gt; and &lt;code&gt;searchTextBox.id = &quot;tipue_search_input&quot;&lt;/code&gt; are what&#39;s being done as per the Tipue documentation, so let&#39;s never change that code. &lt;code&gt;searchTextBox.placeholder = &quot;Search...&quot;&lt;/code&gt; can be changed and even removed if you want to...I would change it but never remove it as it&#39;s a great visual cue for end-users.&lt;/p&gt;

&lt;p&gt;The end result of all this is an input tag which, from a code perspective, looks like this: &lt;code&gt;&amp;lt;input type=&quot;text&quot; name=&quot;q&quot; id=&quot;tipue_search_input&quot; placeholder=&quot;Search...&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;searchButton.type = &amp;quot;submit&amp;quot;;
searchButton.value = &amp;quot;Search&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We next have to apply attributes to our second input element.  The main thing we have to do is turn it into a submit button: that happens with the &lt;code&gt;searchButton.type = &quot;submit&quot;&lt;/code&gt; line of code.&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;searchButton.value&lt;/code&gt; can be anything you want it to be.&lt;/p&gt;

&lt;p&gt;The end result of all this is a submit button which, from a code perspective, looks like this: &lt;code&gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Search&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we have to arrange all the page elements we created off-DOM.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;form.appendChild(searchTextBox);
form.appendChild(searchButton);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Since the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag should contain our two &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags, the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag is viewed as the &quot;parent element&quot; and each &lt;code&gt;input&lt;/code&gt; tag is viewed as a &quot;child element&quot;. We can add each child to the inside of the parent using the &lt;code&gt;appendChild()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Because the search box (which is represented by the &lt;code&gt;searchTextBox&lt;/code&gt; variable) is appended first, it will appear in our code before the search button (which is represented by the &lt;code&gt;searchButton&lt;/code&gt; variable).&lt;/p&gt;

&lt;p&gt;At this point, we&#39;ve constructed our search box the way we want to and it exists off-DOM in the browser memory...the time has come to load it onto the pages.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;frag.appendChild(form);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We load our &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag and all of its contents into our document fragment, which is curently represented in the variable list above by our &lt;code&gt;frag&lt;/code&gt; variable.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;loadSearchBox.appendChild(frag);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Since &lt;code&gt;frag&lt;/code&gt; contains our complete &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; code, JavaScript takes it and loads it into the &lt;code&gt;&amp;lt;div id=&quot;searchbox&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; element already on our web pages, targeting it with the &lt;code&gt;loadSearchBox&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;At this point, this is what the JavaScript (not CSS) detection process looks like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;One of our HTML pages load.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the page loads in a browser where JavaScript is &lt;strong&gt;&lt;em&gt;enabled&lt;/em&gt;&lt;/strong&gt;, &lt;code&gt;js/detect.js&lt;/code&gt; changes the &lt;code&gt;no-js&lt;/code&gt; class in the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag to &lt;code&gt;js&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The above class name change means that the &lt;code&gt;.js #no-js-searchbox&lt;/code&gt; selector can apply a &lt;code&gt;display:none&lt;/code&gt; setting to the Google CSE search box currently on the page and hide it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;js/scripts.js&lt;/code&gt; runs the code that builds the Tipue search box off-DOM and loads it onto the page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the page loads in a browser where JavaScript is &lt;strong&gt;&lt;em&gt;disabled&lt;/em&gt;&lt;/strong&gt;, steps 2, 3 and 4 can&#39;t happen because they need JavaScript to run.  So the Google CSE search box won&#39;t be set to &lt;code&gt;display:none&lt;/code&gt; and be completely visible, giving our end-users a search option.  Also, since JS is disabled, the Tipue search box won&#39;t be built.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;em&gt;(Shameless self-promotion: this part of the tutorial focused on dynamically constructing page elements off-DOM....if you want to learn more about this, check out my &lt;a href=&quot;/javascript-off-dom/&quot; title=&quot;kaidez screencast on creating web page elements off-DOM&quot;&gt;off-DOM screencast tutorial&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;css-detection&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Step 3: Use JavaScript to Detect if CSS is Disabled&lt;/h2&gt;

&lt;p&gt;The code in Step 2 works well if either JavaScript is disabled or if both JavaScript &lt;em&gt;and&lt;/em&gt; CSS are disabled. But if &lt;em&gt;just&lt;/em&gt; CSS is disabled, things fall apart.&lt;/p&gt;

&lt;p&gt;If &lt;em&gt;just&lt;/em&gt; CSS is disabled, JavaScript will still change the &lt;code&gt;no-js&lt;/code&gt; class name in our &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag to &lt;code&gt;js&lt;/code&gt;. The point of this code was to allow the invocation of the &lt;code&gt;.js #no-js-searchbox&lt;/code&gt; selector so we can hide our Google CSE search box.&lt;/p&gt;

&lt;p&gt;But if &lt;em&gt;just&lt;/em&gt; CSS is disabled in a browser, it renders all custom styles useless and allows only the the browser&#39;s default styling to render. This means that &lt;code&gt;.js #no-js-searchbox&lt;/code&gt; will be ignored and the CSE box will be visible.&lt;/p&gt;

&lt;p&gt;And since JavaScript is enabled in this case, the Tipue search box will load onto our page, meaning every page will have &lt;em&gt;two&lt;/em&gt; search boxes. That&#39;s bad so we need to detect if CSS is &lt;em&gt;enabled&lt;/em&gt;, making sure that the Tipue search box isn&#39;t built if CSS is &lt;em&gt;disabled&lt;/em&gt;.  Which is fine because, as mentioned in the paragraph above, the Google search box will be visible if CSS is disabled, giving our end-users a search option in every situation.&lt;/p&gt;

&lt;p&gt;Someone by the name of &quot;Kethinov&quot; shared &lt;a href=&quot;http://www.sitepoint.com/forums/showthread.php?592155-How-to-detect-whether-CSS-enabled-or-not-using-Javascript&quot; title=&quot;How to detect whether CSS enabled or not using JavaScript&quot;&gt;a very cool trick to use JavaScript to detect if CSS is enabled in a browser&lt;/a&gt; over on the SitePoint forum. I made a few syntax changes but remain quite loyal to his ridiculously clever code.&lt;/p&gt;

&lt;p&gt;Let&#39;s update our already-existing &lt;code&gt;js/scripts.js&lt;/code&gt; file so it looks like this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;(function(){

  // Tipue code
  $(function() {
    $(&amp;#39;#tipue_search_input&amp;#39;).tipuesearch();
  });

  // Variables used throughout the code
  var loadMenu,
    isCSSDisabled,
    testCSS,
    currStyle;
  
  // Function that builds the Tipue search box
  loadMenu = function() {
    var loadSearchBox = document.getElementById(&amp;quot;searchbox&amp;quot;),
      frag = document.createDocumentFragment(),
      form = document.createElement(&amp;quot;form&amp;quot;),
      searchTextBox = document.createElement(&amp;quot;input&amp;quot;),
      searchButton = document.createElement(&amp;quot;input&amp;quot;);
    
    form.action = &amp;quot;search.html&amp;quot;;
    form.setAttribute(&amp;quot;role&amp;quot;, &amp;quot;search&amp;quot;);

    searchTextBox.type = &amp;quot;text&amp;quot;;
    searchTextBox.name = &amp;quot;q&amp;quot;;
    searchTextBox.id = &amp;quot;tipue_search_input&amp;quot;;
    searchTextBox.placeholder = &amp;quot;Search...&amp;quot;;

    searchButton.type = &amp;quot;submit&amp;quot;;
    searchButton.value = &amp;quot;Search&amp;quot;;

    form.appendChild(searchTextBox);
    form.appendChild(searchButton);

    frag.appendChild(form);

    loadSearchBox.appendChild(frag);
    
  }

  // Start detecting if CSS is enabled or disabled
  isCSSDisabled = false;
  
  testCSS = document.createElement(&amp;#39;div&amp;#39;);

  testCSS.style.position = &amp;#39;absolute&amp;#39;;

  document.getElementsByTagName(&amp;#39;body&amp;#39;)[0].appendChild(testCSS);

  if (testCSS.currentStyle) {
    currStyle = testCSS.currentStyle[&amp;#39;position&amp;#39;];
  } else if (window.getComputedStyle) {
      currStyle = document.defaultView.getComputedStyle(testCSS, null).getPropertyValue(&amp;#39;position&amp;#39;);
  }

  isCSSDisabled = (currStyle === &amp;#39;static&amp;#39;) ? true : false;

  document.getElementsByTagName(&amp;#39;body&amp;#39;)[0].removeChild(testCSS);

  if (isCSSDisabled === false) {
    loadMenu();
  } else {
    return false;
  }

})();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We already know what the Tipue code is doing so let&#39;s look at the &quot;CSS enabled/disabled&quot; detection code...&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;var loadMenu,
  isCSSDisabled,
  testCSS,
  currstyle;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We&#39;re creating four new variables using the single var pattern again. We&#39;ll give them value as we go along, starting with the &lt;code&gt;loadMenu&lt;/code&gt; variable.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;loadMenu = function() {
...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The code we used to build the Tipue search box is now a function stored in a variable called &lt;code&gt;loadMenu&lt;/code&gt;.  The code hasn&#39;t changed so it&#39;s not displayed here, but it&#39;s important to understand that while the previous version of the code ran immediately, this new version isn&#39;t doing that. This code will now &lt;em&gt;not&lt;/em&gt; run until we tell it to.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;isCSSDisabled = false;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;isCSSDisabled&lt;/code&gt; variable that we created earlier is a Boolean type variable, meaning it has a value of either true or false. We&#39;re setting it to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isCSSDisabled&lt;/code&gt; will be the variable that will tell us whether or not CSS is enabled in the browser....remember that.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;testCSS = document.createElement(&amp;#39;div&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;testCSS&lt;/code&gt; variable that we created earlier is storing a reference to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag created with the &lt;code&gt;createElement()&lt;/code&gt; method.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;testCSS.style.position = &amp;#39;absolute&amp;#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The value of a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag&#39;s position property is &lt;code&gt;static&lt;/code&gt; by default...let&#39;s change the position property of our &lt;code&gt;testCSS&lt;/code&gt; div to &lt;code&gt;absolute&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;document.getElementsByTagName(&amp;#39;body&amp;#39;)[0].appendChild(testCSS);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Load the &lt;code&gt;testCSS&lt;/code&gt; div onto our web page so we can properly detect it in a browser. Do this by finding the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag and place the &lt;code&gt;testCSS&lt;/code&gt; div inside of it. It will be placed just above the closing &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag because we&#39;re using &lt;code&gt;appendChild()&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;if (testCSS.currentStyle) {
  currStyle = testCSS.currentStyle[&amp;#39;position&amp;#39;];
} else if (window.getComputedStyle) {
    currStyle = document.defaultView.getComputedStyle(testCSS, null).getPropertyValue(&amp;#39;position&amp;#39;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We need to find the value of our &lt;code&gt;testCSS&lt;/code&gt; div&#39;s position property and place it inside the &lt;code&gt;currStyle&lt;/code&gt; variable we created earlier. oldIE refers to this property one way...the other browsers refer to it another way. So we need to use a little feature detection here.&lt;/p&gt;

&lt;p&gt;If our &lt;code&gt;testCSS&lt;/code&gt; div has a &lt;code&gt;currentStyle&lt;/code&gt; property attached to it, we&#39;re in oldIE. So use &lt;code&gt;currentStyle&lt;/code&gt; to find the position property and store it&#39;s value inside &lt;code&gt;currStyle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But if the &lt;code&gt;window&lt;/code&gt; object has a &lt;code&gt;getComputedStyle()&lt;/code&gt; method attached to it, we&#39;re in a browser other than oldIE. So use &lt;code&gt;getComputedStyle()&lt;/code&gt; to find the position property and store its value inside &lt;code&gt;currStyle&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;isCSSDisabled = (currStyle === &amp;#39;static&amp;#39;) ? true : false;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Our &lt;code&gt;isCSSDisabled&lt;/code&gt; variable runs a quick ternary operation, which is a short-hand conditional check.  As previously mentioned, &lt;code&gt;isCSSDisabled&lt;/code&gt; will tell us whether or not CSS is enabled in the browser and does so as follows...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isCSSDisabled&lt;/code&gt; checks the value of our &lt;code&gt;currStyle&lt;/code&gt; variable which, again, is storing the value of our &lt;code&gt;testCSS&lt;/code&gt; div&#39;s position property.  If it still has its default &lt;code&gt;static&lt;/code&gt; setting, it means our browser is ignoring the &lt;code&gt;absolute&lt;/code&gt; property we applied...which would only happen if CSS was disabled in a browser.  So &lt;code&gt;isCSSDisabled&lt;/code&gt; will equal &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But if &lt;code&gt;testCSS&lt;/code&gt; div&#39;s position property is set to anything else &lt;em&gt;but&lt;/em&gt; &lt;code&gt;static&lt;/code&gt; (such as the &lt;code&gt;absolute&lt;/code&gt; setting we gave it earlier), then CSS must be enabled. So &lt;code&gt;isCSSDisabled&lt;/code&gt; will equal &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;document.getElementsByTagName(&amp;#39;body&amp;#39;)[0].removeChild(testCSS);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Our test is done so we don&#39;t need &lt;code&gt;testCSS&lt;/code&gt; div on our page anymore...let&#39;s remove it.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;if (isCSSDisabled === false) {
  loadMenu();
} else {
  return false;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Our &lt;code&gt;testCSS&lt;/code&gt; div may be gone but our &lt;code&gt;isCSSDisabled&lt;/code&gt; variable is still around, and we can check its value. And if &lt;code&gt;isCSSDisabled&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;, it means that CSS is &lt;em&gt;not&lt;/em&gt; disabled so it&#39;s safe to run our &lt;code&gt;loadMenu()&lt;/code&gt; function to build the Tipue search box. But in any other situation, such as &lt;code&gt;isCSSDisabled&lt;/code&gt; being set to &lt;code&gt;true&lt;/code&gt;, don&#39;t do anything else and, just to play it safe, do absolutely nothing by performing a basic &lt;code&gt;return false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;More Notes&lt;/h2&gt;

&lt;p&gt;While this code works, there are a few things to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because of how we&#39;ve structured it, this code will run every time a page loads so we need to check its performance. On the average, the off-DOM building and JS/CSS detection code takes 0.6-0.9 milliseconds to run. But this code is in the same file as the code that executes Tipue searches, so that number can jump to around 1.2 milliseconds to run when such a search is invoked...it didn&#39;t get any higher than that.  This isn&#39;t bad but it&#39;s something to keep in mind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hiding elements using &lt;code&gt;display:none&lt;/code&gt; is generally frowned upon from an accessibility standpoint. &lt;a href=&quot;http://developer.yahoo.com/blogs/ydn/clip-hidden-content-better-accessibility-53456.html&quot;&gt;The Yahoo! dev team has been recommending another method since 2010&lt;/a&gt; and it&#39;s in wide use, but implementing it would mean that the Google search box would be picked up by a screen reader as well as the Tab key.  That means that two search boxes could have been picked up by the various accessibility methods and caused a major headache. For that reason, I stuck with &lt;code&gt;display:none&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are lots of search options for static sites generators like Jekyll...we just need to try things and then implement, test, then deploy them. This is just one thing...I&#39;m sure that there are more and I haven&#39;t found them.  Please share these things in the comments if you like.&lt;/p&gt;
</description>
				<pubDate>Thu, 21 Nov 2013 00:00:00 -0500</pubDate>
				<link>http://kaidez.com/custom-jekyll-search/</link>
				<guid isPermaLink="true">http://kaidez.com/custom-jekyll-search/</guid>
			</item>
		
	</channel>
</rss>